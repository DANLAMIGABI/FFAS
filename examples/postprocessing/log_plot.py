#author - Frank Patterson

import matplotlib.pyplot as plt
"""
error_c1 = \
[[ 10 , 33.529 , 8.417 , None , 161.97],
[ 20 , 21.62 , 6.58 , 0.100917452963 , 324.19],
[ 30 , 18.933 , 5.869 , 0.0326706074398 , 486.87],
[ 40 , 17.22 , 6.084 , 0.0236530461683 , 648.75],
[ 50 , 16.244 , 6.086 , 0.0112638579123 , 810.76],
[ 60 , 15.249 , 6.177 , 0.0120757852479 , 972.54],
[ 70 , 14.718 , 6.168 , 0.00781622120378 , 1135.2],
[ 80 , 14.114 , 6.157 , 0.010085933416 , 1297.55],
[ 90 , 13.528 , 6.288 , 0.0087328353167 , 1459.56],
[ 100 , 13.115 , 6.297 , 0.0062589070798 , 1621.35],
[ 110 , 12.877 , 6.237 , 0.00634002223355 , 1783.14],
[ 120 , 12.625 , 6.434 , 0.00382077348558 , 1944.92],
[ 130 , 12.253 , 6.436 , 0.00488088513297 , 2106.81],
[ 140 , 12.034 , 6.421 , 0.00332362708673 , 2268.54],
[ 150 , 11.8 , 6.404 , 0.00488978945722 , 2431.07],
[ 160 , 11.648 , 6.435 , 0.00321968119434 , 2592.61],
[ 170 , 11.338 , 6.527 , 0.00620151818756 , 2754.35],
[ 180 , 11.193 , 6.575 , 0.00677960987624 , 2916.22],
[ 190 , 11.071 , 6.645 , 0.00367554259638 , 3077.98],
[ 200 , 10.728 , 6.664 , 0.00435540808372 , 3240.02],
[ 210 , 10.624 , 6.631 , 0.00545712711216 , 3401.68],
[ 220 , 10.594 , 6.626 , 0.00641231653794 , 3563.48],
[ 230 , 10.384 , 6.755 , 0.00315170734265 , 3725.07],
[ 240 , 10.307 , 6.765 , 0.00368247913498 , 3887.12],
[ 250 , 10.219 , 6.75 , 0.00276748217683 , 4049.23],
[ 260 , 10.071 , 6.842 , 0.00273202260658 , 4211.62],
[ 270 , 10.055 , 6.904 , 0.00438070875537 , 4373.87],
[ 280 , 9.861 , 6.831 , 0.00238896862087 , 4535.94],
[ 290 , 9.785 , 6.852 , 0.00405357927444 , 4697.58],
[ 300 , 9.684 , 6.857 , 0.00492962781197 , 4861.98],
[ 310 , 9.537 , 6.885 , 0.00349785190339 , 5024.12],
[ 320 , 9.467 , 7.082 , 0.0041156223634 , 5186.24],
[ 330 , 9.306 , 6.978 , 0.00294561410019 , 5348.49],
[ 340 , 9.293 , 7.022 , 0.0038598713077 , 5510.27],
[ 350 , 9.201 , 7.005 , 0.00412334870593 , 5672.23],
[ 360 , 9.071 , 7.095 , 0.00387944846689 , 5834.0],
[ 370 , 9.078 , 7.098 , 0.00391484004272 , 5996.13],
[ 380 , 8.911 , 7.06 , 0.00365311291286 , 6158.27],
[ 390 , 8.879 , 7.145 , 0.00330800080357 , 6320.07],
[ 400 , 8.723 , 7.205 , 0.00306753350073 , 6481.72],]
best_c1 = 5.78534534939
test_c1 = 0.0697029560168 

error_c2 = \
[[ 10 , 25.737 , 9.878 , None , 267.23],
[ 20 , 16.195 , 8.404 , 0.0957398965369 , 534.8],
[ 30 , 13.45 , 8.214 , 0.0325699958774 , 803.01],
[ 40 , 11.998 , 8.04 , 0.0208813596295 , 1070.11],
[ 50 , 10.94 , 8.035 , 0.0174310420675 , 1337.8],
[ 60 , 10.043 , 7.858 , 0.0127963990727 , 1605.42],
[ 70 , 9.466 , 8.134 , 0.0103685211693 , 1872.93],
[ 80 , 9.028 , 7.879 , 0.00997116604404 , 2140.57],
[ 90 , 8.592 , 8.064 , 0.010375476756 , 2408.93],
[ 100 , 8.237 , 8.087 , 0.00584639853635 , 2676.65],
[ 110 , 7.893 , 8.155 , 0.00597807570012 , 2944.02],
[ 120 , 7.622 , 8.138 , 0.00581294570135 , 3211.14],
[ 130 , 7.313 , 8.144 , 0.00718394192297 , 3478.43],
[ 140 , 7.167 , 8.251 , 0.00734237568141 , 3746.01],
[ 150 , 6.983 , 8.272 , 0.00576109860789 , 4013.22],
[ 160 , 6.832 , 8.38 , 0.00355405011092 , 4280.58],
[ 170 , 6.583 , 8.398 , 0.00379432407003 , 4547.61],
[ 180 , 6.564 , 8.426 , 0.00358330505503 , 4814.61],
[ 190 , 6.349 , 8.549 , 0.00265313215439 , 5081.66],
[ 200 , 6.242 , 8.54 , 0.00320688372264 , 5349.51],
[ 210 , 6.163 , 8.6 , 0.00261110792376 , 5616.87],
[ 220 , 5.993 , 8.584 , 0.00338722425535 , 5883.87],
[ 230 , 5.932 , 8.672 , 0.00461930570749 , 6151.0],
[ 240 , 5.803 , 8.76 , 0.00151161785261 , 6418.09],
[ 250 , 5.72 , 8.73 , 0.00192587545302 , 6685.69],
[ 260 , 5.605 , 8.807 , 0.00275235006545 , 6952.93],
[ 270 , 5.598 , 8.813 , 0.00273521566928 , 7220.55],
[ 280 , 5.475 , 8.847 , 0.00214226946725 , 7487.52],
[ 290 , 5.393 , 8.914 , 0.00231437982817 , 7754.88],
[ 300 , 5.315 , 8.961 , 0.00230448146415 , 8021.95],
[ 310 , 5.218 , 9.004 , 0.0020509820441 , 8289.91],
[ 320 , 5.203 , 8.985 , 0.00286761417237 , 8557.15],
[ 330 , 5.144 , 9.041 , 0.00182866918085 , 8824.46],
[ 340 , 5.099 , 9.06 , 0.00266021714802 , 9091.9],
[ 350 , 4.99 , 9.108 , 0.00246180008248 , 9359.45],
[ 360 , 4.98 , 9.116 , 0.00144096866249 , 9627.32],
[ 370 , 4.89 , 9.191 , 0.00297608095166 , 9894.86],
[ 380 , 4.883 , 9.195 , 0.00170028125624 , 10161.97],
[ 390 , 4.787 , 9.218 , 0.0021169473432 , 10428.93],
[ 400 , 4.747 , 9.293 , 0.00298881291508 , 10696.64],]
best_c2 = 7.85829458849
test_c2 = 0.0762941222184 

error_c3 = \
[[ 10 , 21.007 , 7.473 , None , 411.2],
[ 20 , 14.052 , 6.324 , 0.0879720193565 , 822.11],
[ 30 , 11.64 , 6.168 , 0.0359188074616 , 1233.0],
[ 40 , 10.143 , 6.124 , 0.0251688329363 , 1643.79],
[ 50 , 9.212 , 6.262 , 0.0176077130866 , 2054.39],
[ 60 , 8.375 , 6.243 , 0.0150796667509 , 2466.15],
[ 70 , 7.914 , 6.298 , 0.0108850802524 , 2876.87],
[ 80 , 7.414 , 6.402 , 0.00919319993244 , 3287.86],
[ 90 , 7.012 , 6.526 , 0.00511822282085 , 3698.89],
[ 100 , 6.562 , 6.488 , 0.00870250857521 , 4110.02],
[ 110 , 6.332 , 6.604 , 0.00635357983006 , 4521.0],
[ 120 , 6.068 , 6.718 , 0.00376138807367 , 4931.73],
[ 130 , 5.821 , 6.759 , 0.00455238835613 , 5342.88],
[ 140 , 5.56 , 6.758 , 0.00695403511939 , 5753.61],
[ 150 , 5.407 , 6.823 , 0.00365883667609 , 6164.52],
[ 160 , 5.244 , 6.913 , 0.00404076652444 , 6575.36],
[ 170 , 5.066 , 7.006 , 0.00376335015054 , 6986.6],
[ 180 , 4.938 , 7.07 , 0.00289190209353 , 7397.75],
[ 190 , 4.764 , 7.083 , 0.00354396962024 , 7808.41],
[ 200 , 4.62 , 7.164 , 0.00325619571839 , 8219.66],
[ 210 , 4.486 , 7.188 , 0.0033208445467 , 8630.49],
[ 220 , 4.372 , 7.226 , 0.00380083516877 , 9041.39],
[ 230 , 4.291 , 7.315 , 0.00322098044108 , 9452.01],
[ 240 , 4.187 , 7.322 , 0.00262104286144 , 9862.41],
[ 250 , 4.103 , 7.415 , 0.00261235524664 , 10272.63],
[ 260 , 4.008 , 7.388 , 0.00281706993853 , 10683.1],
[ 270 , 3.934 , 7.456 , 0.00195319429918 , 11093.97],
[ 280 , 3.865 , 7.467 , 0.00242917469968 , 11504.89],
[ 290 , 3.822 , 7.482 , 0.00176563529515 , 11915.64],
[ 300 , 3.724 , 7.575 , 0.00249172276 , 12326.4],
[ 310 , 3.658 , 7.586 , 0.00258058394069 , 12737.29],
[ 320 , 3.62 , 7.618 , 0.00189119512884 , 13147.85],
[ 330 , 3.531 , 7.714 , 0.00365100278865 , 13558.55],
[ 340 , 3.504 , 7.678 , 0.00137206378869 , 13969.1],
[ 350 , 3.428 , 7.671 , 0.00141973649071 , 14379.48],
[ 360 , 3.36 , 7.73 , 0.00213695039632 , 14790.12],
[ 370 , 3.326 , 7.745 , 0.002028217985 , 15200.84],
[ 380 , 3.278 , 7.831 , 0.0021466178723 , 15611.83],
[ 390 , 3.21 , 7.771 , 0.00333218627605 , 16023.62],
[ 400 , 3.199 , 7.82 , 0.00408632060139 , 16434.57],]
best_c3 = 6.08501106413
test_c3 = 0.0614647582235 

error_c4 = \
[[ 10 , 23.716 , 8.611 , None , 372.81],
[ 20 , 14.999 , 6.981 , 0.101543641712 , 746.35],
[ 30 , 12.293 , 6.588 , 0.042089285314 , 1119.64],
[ 40 , 10.631 , 6.529 , 0.0283469947542 , 1492.55],
[ 50 , 9.458 , 6.507 , 0.0210915332438 , 1865.52],
[ 60 , 8.649 , 6.456 , 0.0145615584557 , 2238.09],
[ 70 , 7.943 , 6.533 , 0.0137496207593 , 2610.67],
[ 80 , 7.345 , 6.53 , 0.0120534596819 , 2983.85],
[ 90 , 6.987 , 6.58 , 0.00707872105747 , 3356.78],
[ 100 , 6.545 , 6.668 , 0.00662255176983 , 3729.33],
[ 110 , 6.206 , 6.699 , 0.00896832737637 , 4102.22],
[ 120 , 5.936 , 6.69 , 0.00583053134898 , 4475.63],
[ 130 , 5.655 , 6.708 , 0.00784299764741 , 4848.09],
[ 140 , 5.487 , 6.772 , 0.00452873297776 , 5220.57],
[ 150 , 5.244 , 6.756 , 0.00470779209195 , 5593.24],
[ 160 , 5.025 , 6.861 , 0.00413456564463 , 5966.0],
[ 170 , 4.901 , 6.93 , 0.00347770758082 , 6338.48],
[ 180 , 4.728 , 6.958 , 0.00327854105899 , 6712.14],
[ 190 , 4.53 , 6.907 , 0.00531441016496 , 7084.87],
[ 200 , 4.459 , 6.991 , 0.00456849881988 , 7458.05],
[ 210 , 4.32 , 7.004 , 0.00382802958608 , 7830.23],
[ 220 , 4.233 , 6.992 , 0.00375090764817 , 8202.79],
[ 230 , 4.102 , 6.997 , 0.00361762210877 , 8575.34],
[ 240 , 3.995 , 7.052 , 0.00343592681755 , 8948.91],
[ 250 , 3.914 , 7.088 , 0.00283475903342 , 9321.69],
[ 260 , 3.833 , 7.125 , 0.00289439673995 , 9694.85],
[ 270 , 3.768 , 7.131 , 0.0033560819568 , 10067.53],
[ 280 , 3.671 , 7.195 , 0.00143526521985 , 10440.74],
[ 290 , 3.625 , 7.201 , 0.00140890402088 , 10814.3],
[ 300 , 3.516 , 7.237 , 0.00173277498343 , 11187.35],
[ 310 , 3.487 , 7.257 , 0.00231092712556 , 11560.19],
[ 320 , 3.41 , 7.285 , 0.00150190702825 , 11933.52],
[ 330 , 3.367 , 7.31 , 0.00293977900748 , 12306.58],
[ 340 , 3.301 , 7.328 , 0.00211393602826 , 12679.41],
[ 350 , 3.213 , 7.342 , 0.00177354492074 , 13053.22],
[ 360 , 3.197 , 7.362 , 0.0023527649069 , 13425.99],
[ 370 , 3.128 , 7.442 , 0.00228232640934 , 13798.63],
[ 380 , 3.082 , 7.402 , 0.0024383337667 , 14171.3],
[ 390 , 3.035 , 7.415 , 0.00139575279975 , 14543.9],
[ 400 , 3.01 , 7.441 , 0.00209186492046 , 14917.57],]
best_c4 = 6.40562795799
best_c4 = 0.064703312707 

error_c5 = \
[[ 10 , 28.37 , 10.232 , None , 214.85],
[ 20 , 20.196 , 8.236 , 0.0802888023844 , 429.92],
[ 30 , 17.824 , 8.055 , 0.0271801729557 , 644.63],
[ 40 , 16.581 , 8.197 , 0.0134729007254 , 858.61],
[ 50 , 15.473 , 7.953 , 0.0134420258558 , 1073.59],
[ 60 , 14.685 , 8.03 , 0.0124729255855 , 1287.99],
[ 70 , 14.078 , 8.236 , 0.00970811380375 , 1502.34],
[ 80 , 13.535 , 8.149 , 0.00735451638734 , 1716.66],
[ 90 , 13.048 , 8.055 , 0.00936974295918 , 1930.89],
[ 100 , 12.775 , 8.14 , 0.00662843742079 , 2145.29],
[ 110 , 12.444 , 8.265 , 0.00696234577861 , 2360.1],
[ 120 , 12.059 , 8.339 , 0.0048985754411 , 2574.66],
[ 130 , 11.615 , 8.357 , 0.0048707258045 , 2789.34],
[ 140 , 11.523 , 8.474 , 0.0041860224509 , 3003.41],
[ 150 , 11.299 , 8.493 , 0.00358032437778 , 3218.09],
[ 160 , 11.128 , 8.42 , 0.00572672921967 , 3432.7],
[ 170 , 10.874 , 8.508 , 0.00367549533151 , 3647.25],
[ 180 , 10.664 , 8.56 , 0.0053853024906 , 3861.52],
[ 190 , 10.502 , 8.706 , 0.00401688372247 , 4076.0],
[ 200 , 10.313 , 8.729 , 0.00363036131388 , 4290.34],
[ 210 , 10.051 , 8.612 , 0.00727486923298 , 4504.78],
[ 220 , 9.943 , 8.787 , 0.00410023211914 , 4719.01],
[ 230 , 9.775 , 8.76 , 0.00314273289118 , 4933.15],
[ 240 , 9.628 , 8.819 , 0.00540111262061 , 5147.03],
[ 250 , 9.506 , 8.774 , 0.00433562281655 , 5361.23],
[ 260 , 9.529 , 8.922 , 0.00515453267897 , 5575.41],
[ 270 , 9.333 , 8.735 , 0.00253078465945 , 5789.67],
[ 280 , 9.175 , 8.862 , 0.0049359222397 , 6003.84],
[ 290 , 9.093 , 8.801 , 0.00163103148078 , 6219.51],
[ 300 , 8.967 , 8.896 , 0.0035580523478 , 6437.58],
[ 310 , 8.782 , 8.951 , 0.00520273519939 , 6656.49],
[ 320 , 8.833 , 8.843 , 0.00474122242921 , 6875.94],
[ 330 , 8.602 , 8.979 , 0.0029626965629 , 7094.85],
[ 340 , 8.502 , 9.0 , 0.00361413117417 , 7314.12],
[ 350 , 8.326 , 8.876 , 0.00573775063244 , 7532.87],
[ 360 , 8.29 , 8.97 , 0.00287437811767 , 7751.67],
[ 370 , 8.271 , 8.987 , 0.00283048539787 , 7969.8],
[ 380 , 8.146 , 8.944 , 0.00337474303103 , 8188.11],
[ 390 , 8.027 , 8.904 , 0.00359285799013 , 8404.94],
[ 400 , 7.945 , 9.061 , 0.00417044664774 , 8621.87],]
best_c5 = 7.70117530419
best_c5 = 0.0733445267066 

nTrain = 401
nVal = 99
dataSet = error_c3
maxX = 180
case_labels = ['Case 1 (30, 100, 30)', 'Case 2 (40, 130, 40)', 'Case 3 (50, 160, 50)', 'Case 4 (50, 100, 30)', 'Case 5 (30, 100, 50)']

#single Case
plt.figure()
#plt.subplot(2,1,1)
#plt.title('Example Training (Case 3)')
plt.plot([x[0] for x in dataSet if x[0] < maxX], [x[1]/nTrain for x in dataSet if x[0] < maxX])
plt.plot([x[0] for x in dataSet if x[0] < maxX], [x[2]/nVal for x in dataSet if x[0] < maxX])
plt.plot([x[0] for x in dataSet if x[0] < maxX], [(x[1]+x[2])/(nTrain+nVal) for x in dataSet if x[0] < maxX])
#plt.subplot(3,1,3)
plt.plot([x[0] for x in dataSet if x[0] < maxX], [x[3] for x in dataSet if x[0] < maxX], '--m')

vmin_i = dataSet.index(min(dataSet, key=lambda y:y[2]/nVal)) #index of minimum val error
plt.plot([dataSet[vmin_i][0],dataSet[vmin_i][0]], [0,.10], ':k') #minimium val error
plt.text(dataSet[vmin_i][0], 0.05, 'Min Validation Error', fontsize=12, rotation=90)

tmin_i = [(x[1]+x[2])/(nTrain+nVal) for x in dataSet].index(min([(x[1]+x[2])/(nTrain+nVal) for x in dataSet]))
#plt.plot([dataSet[tmin_i][0],dataSet[tmin_i][0]], [0,.10], ':k') #minimium val error
#plt.text(dataSet[tmin_i][0], 0.05, 'Min Total Error', fontsize=12, rotation=90)


plt.ylim([0,0.08])
plt.legend(['Training Error', 'Validation Error', 'Cumulative Error', 'Running StdDev'], 
           loc='top', fontsize=12, bbox_to_anchor=(0.25, 1.05), ncol=2)
plt.xlabel('Iteration')
plt.ylabel('Average RSM Discrete Error')


#all validation error
plt.figure()
#plt.title('Validation Error')
plt.plot([x[0] for x in error_c1 if x[0] < maxX], [x[2]/nVal for x in error_c1 if x[0] < maxX])
plt.plot([x[0] for x in error_c2 if x[0] < maxX], [x[2]/nVal for x in error_c2 if x[0] < maxX])
plt.plot([x[0] for x in error_c3 if x[0] < maxX], [x[2]/nVal for x in error_c3 if x[0] < maxX])
plt.plot([x[0] for x in error_c4 if x[0] < maxX], [x[2]/nVal for x in error_c4 if x[0] < maxX])
plt.plot([x[0] for x in error_c5 if x[0] < maxX], [x[2]/nVal for x in error_c5 if x[0] < maxX])
plt.legend(case_labels, fontsize=12)
plt.xlabel('Iteration')
plt.ylabel('Average RSM Discrete Error (Validation)')

#all training error
plt.figure()
plt.title('Training Error')
plt.plot([x[0] for x in error_c1 if x[0] < maxX], [x[1]/nTrain for x in error_c1 if x[0] < maxX])
plt.plot([x[0] for x in error_c2 if x[0] < maxX], [x[1]/nTrain for x in error_c2 if x[0] < maxX])
plt.plot([x[0] for x in error_c3 if x[0] < maxX], [x[1]/nTrain for x in error_c3 if x[0] < maxX])
plt.plot([x[0] for x in error_c4 if x[0] < maxX], [x[1]/nTrain for x in error_c4 if x[0] < maxX])
plt.plot([x[0] for x in error_c5 if x[0] < maxX], [x[1]/nTrain for x in error_c5 if x[0] < maxX])
plt.legend(case_labels, fontsize=12)
plt.xlabel('Iteration')
plt.ylabel('Average RSM Discrete Error (Training)')

#all cum error
plt.figure()
#plt.title('Cumulative Error')
plt.plot([x[0] for x in error_c1 if x[0] < maxX], [(x[1]+x[2])/(nTrain+nVal) for x in error_c1 if x[0] < maxX])
plt.plot([x[0] for x in error_c2 if x[0] < maxX], [(x[1]+x[2])/(nTrain+nVal) for x in error_c2 if x[0] < maxX])
plt.plot([x[0] for x in error_c3 if x[0] < maxX], [(x[1]+x[2])/(nTrain+nVal) for x in error_c3 if x[0] < maxX])
plt.plot([x[0] for x in error_c4 if x[0] < maxX], [(x[1]+x[2])/(nTrain+nVal) for x in error_c4 if x[0] < maxX])
plt.plot([x[0] for x in error_c5 if x[0] < maxX], [(x[1]+x[2])/(nTrain+nVal) for x in error_c5 if x[0] < maxX])
plt.legend(case_labels, loc='top', fontsize=12, bbox_to_anchor=(0.15, 1.05), ncol=2)
plt.xlabel('Iteration')
plt.ylabel('Average RSM Discrete Error (Cumulative)')

plt.show()
"""

f = open('FCL_files/FRBS_phi/PHIsys_trained_5-2In9-2Out_gauss250tData_50vData_optInputsBEST_GA_fullRange.log', 'r')

#[[bests], [worsts], [avgs]]
data = [[],[],[]]
all_data = []
pop = 218

for line in f:    
    if "Best Member Fitness:" in line:
        bf = float(line.split(":")[1].strip())
        data[0].append(1.0/bf)
    if "Worst Member Fitness:" in line:
        wf = float(line.split(":")[1].strip())
        data[1].append(1.0/wf)
    if "Averge Fitness:" in line:
        af = float(line.split(":")[1].strip())
        data[2].append(1.0/af)
    if " ==> system fitness " in line and not "BASELINE" in line:
        if "Evaluating Population" in line: j = 8
        else: j = 3
        d = float(line.split()[j].strip())
        all_data.append(d)
print "BESTS:", data[0]
print "WORSTS:", data[1]
print "AVGS:", data[2]

"""
plt.figure()
plt.plot([i+1 for i in range(len(data[0]))], data[0])
plt.plot([i+1 for i in range(len(data[2]))], data[2])
plt.legend(['Best Fitness', 'Average Fitness'])
plt.xlabel('Generation')
plt.ylabel('Fitness (Fuzzy Error)')


plt.figure(figsize=(10,4))
ax = plt.subplot(1,1,1)
plt.plot([(i+1)*pop for i in range(len(data[0]))], data[0], c='r', lw=2.0)
plt.plot([(i+1)*pop for i in range(len(data[2]))], data[2], c='b', lw=2.0)
plt.plot([i+1 for i in range(len(all_data))], all_data, alpha=0.3, lw=0.5)
plt.legend(['Best Fitness', 'Average Fitness'], ncol=2, bbox_to_anchor=(0.7, 1.13), fontsize=11)
plt.xlabel('Generation')
plt.ylabel('Fitness (Fuzzy Error)')
plt.xlim([0,8500])
plt.ylim([0,20])
plt.xticks([(i+1)*pop for i in range(len(data[0])) if (i+1)%2 == 0])
ax.set_xticklabels([(i+1) for i in range(len(data[0])) if (i+1)%2 == 0])
plt.grid(True)
"""

plt.figure(figsize=(10,4))
ax = plt.subplot(1,1,1)
plt.plot([(i+1)*pop for i in range(len(data[0]))], data[0], c='r', lw=2.0)
plt.plot([(i+1)*pop for i in range(len(data[2]))], data[2], c='b', lw=2.0)
plt.scatter([i+1 for i in range(len(all_data))], all_data, 5.0, alpha=0.2)
plt.legend(['Best Fitness', 'Average Fitness', 'Function Evaluation'], ncol=3, bbox_to_anchor=(0.8, 1.13), fontsize=11)
plt.xlabel('Generation')
plt.ylabel('Fitness (Fuzzy Error)')
plt.xlim([0,218*33])
plt.ylim([0,20])
plt.xticks([(i+1)*pop for i in range(len(data[0])) if (i+1)%2 == 0])
ax.set_xticklabels([(i+1) for i in range(len(data[0])) if (i+1)%2 == 0])
plt.grid(True)
plt.show()






