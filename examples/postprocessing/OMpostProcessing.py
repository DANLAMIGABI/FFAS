#author - Frank Patterson 
#Post process results from framework 
#make pretty pictures

####### Read in Cases: ##########
import csv, copy
import numpy as np
import pylab as P

import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib.patches import Ellipse
import matplotlib.ticker as ticker
from mpl_toolkits.mplot3d.art3d import Line3DCollection
from mpl_toolkits.mplot3d import Axes3D
from scipy.interpolate import interp1d
from mpl_toolkits.axes_grid1 import make_axes_locatable


from itertools import cycle
import random

from matplotlib.backends.backend_pdf import PdfPages

################################################################################
def getData(fn, dV):
	dataCols = {}
	HEADER = True
	with open(fn, 'rU') as csvfile:
	    reader = csv.reader(csvfile, delimiter=',')
	    
	    for row in reader:

	    	#read header row and get data column numbers
	    	if HEADER: 
	    		HEADERROW = row #save for later
	    		#iterate header and get column number of each 
	    		for i in range(len(row)):
	    			if row[i] in dV: dataCols[i] = row[i]
	    		HEADER = False

	    	#read in data
	    	else:
	    		for i in range(len(row)):
	    			if i in dataCols: dV[dataCols[i]].append(float(row[i]))
	return dV

def sortData(objs):
	#objs = for each data points: [index, [objectives], [], 0.0]
	iFronts = [[]]
	for i in range(len(objs)):
		if i % 200 == 0: print "%.3f percent done" % (100*float(i)/len(objs))
		for j in range(len(objs)):
			if all([objs[i][1][k] >= objs[j][1][k] for k in range(len(objs[i][1]))]): 
				objs[i][2].append(objs[j][0])
			elif all([objs[j][1][k] >= objs[i][1][k] for k in range(len(objs[i][1]))]): 
				objs[i][3] = objs[i][3]+1 
				
		if objs[i][3] == 0: iFronts[0].append(objs[i][0])

	k = 0
	while k < len(iFronts):
		Q = []
		for i in iFronts[k]:
			for j in objs[i][2]: 
				objs[j][3] = objs[j][3] - 1
				if objs[j][3] == 0:
					Q.append(j)
		if len(Q) > 0: iFronts.append(Q)
		k = k+1 
	
	#print "OBJS:"
	#for o in objs: print [ o[0],o[1],o[3] ], ","
	print "--------------------------"
	print "FRONTS:", len(iFronts), 'found...'
	#for f in iFronts: print f
	return iFronts



################################################################################
def parallel_coordinates(fig, axes, data_sets, colors=None, lws=None, style=None):
    """
    #Function to plot parallel_coordinates
    http://stackoverflow.com/questions/8230638/parallel-coordinates-plot-in-matplotlib
    """
    dims = len(data_sets[0])
    x    = range(dims)

    if style is None:
        style = ['r-']*len(data_sets)
    if colors is None:
        colors = ['r']*len(data_sets)
    if lws is None:
        lws = [1.0]*len(data_sets)
    # Calculate the limits on the data
    min_max_range = list()
    for m in zip(*data_sets):
        mn = min(m)
        mx = max(m)
        if mn == mx:
            mn -= 0.5
            mx = mn + 1.
        r  = float(mx - mn)
        min_max_range.append((mn, mx, r))

    # Normalize the data sets
    norm_data_sets = list()
    for ds in data_sets:
        nds = [(value - min_max_range[dimension][0]) / 
                min_max_range[dimension][2] 
                for dimension,value in enumerate(ds)]
        #nds = [value for dimension,value in enumerate(ds)]
        norm_data_sets.append(nds)
    data_sets = norm_data_sets

    # Plot the datasets on all the subplots
    for i, ax in enumerate(axes):
        for dsi, d in enumerate(data_sets):
            ax.plot(x, d, style[dsi], c=colors[dsi], lw=lws[dsi])
        ax.set_xlim([x[i], x[i+1]])

    # Set the x axis ticks 
    for dimension, (axx,xx) in enumerate(zip(axes, x[:])):
        axx.xaxis.set_major_locator(ticker.FixedLocator([xx]))
        ticks = len(axx.get_yticklabels())
        labels = list()
        step = min_max_range[dimension][2] / (ticks - 1)
        mn   = min_max_range[dimension][0]
        for i in xrange(ticks):
            v = mn + i*step
            if v % 1 == 0.0: labels.append('%.d' % v)
        axx.set_yticklabels(labels)

    # Move the final axis' ticks to the right-hand side
    axx = plt.twinx(axes[-1])
    dimension += 1
    axx.xaxis.set_major_locator(ticker.FixedLocator([x[-2], x[-1]]))
    ticks = len(axx.get_yticklabels())
    step = min_max_range[dimension][2] / (ticks - 1)
    mn   = min_max_range[dimension][0]
    labels = ['%4.2f' % (mn + i*step) for i in xrange(ticks)]
    axx.set_yticklabels(labels)

    # Stack the subplots 
    plt.subplots_adjust(wspace=0)

    return plt 
    
def plotOnMorph(data, fPOSs, options=range(6)):
	#data in form [[options1], [options2], ... ]
	SYS_list = ['VL_SYS', 'FWD_SYS', 'WING_SYS', 'ENG_SYS'] #a list of systems
	ASPECT_list = ['VL_SYS_TYPE', 'VL_SYS_PROP', 'VL_SYS_DRV', 'VL_SYS_TECH', 
				'FWD_SYS_PROP', 'FWD_SYS_DRV', 'FWD_SYS_TYPE', 'WING_SYS_TYPE', 'ENG_SYS_TYPE'] 
	OPTION_list = [ ['SMR', 'Traverse Open', 'Tandem Open', 'Prop-In-Wing', 'Prop-In-Body', 'Tailsitter'],
				    ['Prop(s)', 'Rotor(s)', 'Ducted Fan(s)', 'Thrust'],	
					['Shaft Drive', 'React. Drive', 'Tip Blown', 'Thrust'],
					['None', 'Var. RPM', 'Stop. Rotor', 'Var. Diameter', 'Gyrodyne'],
					['Prop(s)', 'Rotor(s)', 'Ducted Fan(s)', 'Thrust'],
					['Shaft Driven', 'Reaction Drive', 'Thrust'],
					['Fixed', 'Tilting VL', 'Disabled', 'Tilt. Non-VL'],
					['Conventional', 'Delta Wing', 'Flying Wing', 'Blended Body', 'Til-wing', 'Stop. Rotor'],
					['Turboshaft', 'Turbojet', 'Turbofan', 'Hybrid'],]
	#sort data by FPOS:
	sfPOSs = sorted(fPOSs)
	sdata = [data[fPOSs.index(s)] for s in sfPOSs]
	fPOSs = sfPOSs
	data = sdata
	#sort by option
	#for i in reversed(range(len(data[0]))):
	#	data.sort(key=lambda x: x[i])
		
	fig = plt.figure()
	ax = fig.add_subplot(111)
	ax.set_xlim([-1,8])
	ax.set_ylim([-0.5,9.5])
	#systems
	ax.text(0,1,SYS_list[0], fontsize=10, ha='right')
	ax.text(0,5,SYS_list[1], fontsize=10, ha='right')
	ax.text(0,8,SYS_list[2], fontsize=10, ha='right')
	ax.text(0,9,SYS_list[3], fontsize=10, ha='right')
	#aspects
	for i in range(len(ASPECT_list)): ax.text(1.3, i+1, ASPECT_list[i], fontsize=10, ha='right')
	#data
	flag = 1

	for j in range(len(data)):
		dat = data[j]
		color = plt.get_cmap('brg')((fPOSs[j]-min(fPOSs))/(max(fPOSs)-min(fPOSs)))
		xs = [d+1 for d in dat]
		ys = [i+1 for i in range(len(dat))]
		f2 = interp1d(ys, xs, kind='cubic', bounds_error=False)
		y = np.arange(min(ys), max(ys)+0.3, 0.1)
		plt.plot(f2(y), y, c=color, alpha=0.3, lw=1.5)
		flag = flag*-1
	
	#options
	plt.text(1.3,0,"OPTIONS:", fontsize=10, ha='right')
	for i in range(6): ax.text(i+2, 0, str(i+1), fontsize=12, ha='center')
	for i in range(len(OPTION_list)):
		for j in range(len(OPTION_list[i])):
			ax.text(j+2, i+1, OPTION_list[i][j], fontsize=11, ha='center', weight='bold', 
					bbox=dict(facecolor='none', edgecolor='k', pad=5.0))
	plt.gca().invert_yaxis()
	
	#format
	plt.tick_params(
		axis='both',          # changes apply to the x-axis
		which='both',      # both major and minor ticks are affected
		bottom='off',      # ticks along the bottom edge are off
		left='off',      # ticks along the bottom edge are off
		top='off',         # ticks along the top edge are off
		right='off',      # ticks along the bottom edge are off
		labelbottom='off', labelleft='off')
	plt.plot([1.5, 1.5], [-0.3,9.2], c='grey')
	plt.plot([-0.4, 7.8], [0.4, 0.4], c='grey', lw=2.0)
	plt.plot([-0.4, 7.8], [4.4, 4.4], c='grey')
	plt.plot([-0.4, 7.8], [7.4, 7.4], c='grey')
	plt.plot([-0.4, 7.8], [8.4, 8.4], c='grey')
	sm = plt.cm.ScalarMappable(cmap=plt.cm.brg)#, norm=plt.normalize(vmin=0, vmax=1))
	sm.set_array(fPOSs)
	ax = plt.gca()
	divider = make_axes_locatable(ax)
	cax = divider.append_axes("right", size="5%", pad=0.08)
	cb = plt.colorbar(sm, cax=cax)
	cb.set_label('System FPoS', rotation=270, labelpad=25)
################################################################################
################################################################################

filename = "runs/fullCompatCases_all12312_5Oct.csv"
opt_file = 'runs/optCases_4Oct15_FPoS_hDist_50g_popX15_65_07_cross3.csv'

dataStrings = [	"compatibility.option1", "compatibility.option2", "compatibility.option3", "compatibility.option4", "compatibility.option5", 
				"compatibility.option6", "compatibility.option7", "compatibility.option8", "compatibility.option9", "compatibility.compatibility",
				"postprocess.response_1",	"postprocess.response_1_r", "postprocess.response_1_POS", 	"postprocess.response_2",	"postprocess.response_2_r", "postprocess.response_2_POS",
				"postprocess.response_3",	"postprocess.response_3_r",	"postprocess.response_3_POS",	"postprocess.response_4",	"postprocess.response_4_r", "postprocess.response_4_POS",
				"postprocess.response_5",	"postprocess.response_5_r",	"postprocess.response_5_POS",	"postprocess.response_6",	"postprocess.response_6_r", "postprocess.response_6_POS",
				"postprocess.response_7",	"postprocess.response_7_r", "postprocess.response_7_POS",	"postprocess.response_8",	"postprocess.response_8_r", "postprocess.response_8_POS",
				"postprocess.response_9",	"postprocess.response_9_r", "postprocess.response_9_POS",   "postprocess.fuzzyPOS", "compatibility.gen_num"]

dataVals1 = {s:[] for s in dataStrings}
optVals1 = {s:[] for s in dataStrings}

dataVals = getData(filename, dataVals1)

# ADD FUZZY POS ******
dataVals['postprocess.fuzzyPOS'] = []
for i in range(len(dataVals["postprocess.response_1_POS"])):
	dataVals['postprocess.fuzzyPOS'].append(min(float(dataVals["postprocess.response_1_POS"][i]),float(dataVals["postprocess.response_2_POS"][i]),float(dataVals["postprocess.response_3_POS"][i]),
												 float(dataVals["postprocess.response_4_POS"][i]),float(dataVals["postprocess.response_6_POS"][i])))
	#dataVals['postprocess.fuzzyPOS'].append(float(dataVals["postprocess.response_1_POS"][i])*float(dataVals["postprocess.response_2_POS"][i])*float(dataVals["postprocess.response_3_POS"][i])*\
	#										float(dataVals["postprocess.response_4_POS"][i])*float(dataVals["postprocess.response_6_POS"][i]))

optVals = getData(opt_file, optVals1)
optVals['postprocess.fuzzyPOS'] = []
for i in range(len(optVals["postprocess.response_1_POS"])):
	optVals['postprocess.fuzzyPOS'].append(min(float(optVals["postprocess.response_1_POS"][i]),float(optVals["postprocess.response_2_POS"][i]),float(optVals["postprocess.response_3_POS"][i]),
												 float(optVals["postprocess.response_4_POS"][i]),float(optVals["postprocess.response_6_POS"][i])))
	#optVals['postprocess.fuzzyPOS'].append(float(optVals["postprocess.response_1_POS"][i])*float(optVals["postprocess.response_2_POS"][i])*float(optVals["postprocess.response_3_POS"][i])*\
	#										float(optVals["postprocess.response_4_POS"][i])*float(optVals["postprocess.response_6_POS"][i]))

################################################################################
print "==> Read in %d baseline cases" % len(dataVals["compatibility.option1"])
print "==> Read in %d optimized cases" % len(optVals["compatibility.option1"])


#VARIABLES
SYS_list = ['VL_SYS', 'FWD_SYS', 'WING_SYS', 'ENG_SYS'] #a list of systems
ASPECT_list = ['VL_SYS_TYPE', 'VL_SYS_PROP', 'VL_SYS_DRV', 'VL_SYS_TECH', 
			   'FWD_SYS_PROP', 'FWD_SYS_DRV', 'FWD_SYS_TYPE', 'WING_SYS_TYPE', 'ENG_SYS_TYPE'] 
OPTIONmax = [6,3,3,5,4,3,4,6,4]

optionVals = ["compatibility.option1", "compatibility.option2", "compatibility.option3", "compatibility.option4", "compatibility.option5", 
			  "compatibility.option6", "compatibility.option7", "compatibility.option8", "compatibility.option9"]
options_ALL = [[float(dataVals["compatibility.option1"][i]), float(dataVals["compatibility.option2"][i]), float(dataVals["compatibility.option3"][i]), 
				float(dataVals["compatibility.option4"][i]), float(dataVals["compatibility.option5"][i]), float(dataVals["compatibility.option6"][i]), 
				float(dataVals["compatibility.option7"][i]), float(dataVals["compatibility.option8"][i]), float(dataVals["compatibility.option9"][i])] for i in range(len(dataVals["compatibility.option1"]))] 

################################################################################
### PRE_PROCESSING:
#capture generations
gens = sorted(set([float(g) for g in optVals['compatibility.gen_num']]))[1:100]
optGenVals = [{s:[] for s in dataStrings} for g in gens] 
print 'GENERATIONS:', gens

#get optimization data for each generation
for g in gens:
	j = gens.index(g)
	for i in range(len(optVals['compatibility.gen_num'])):
 		if float(optVals['compatibility.gen_num'][i]) == g:
 			for ds in optGenVals[j]:
 				if len(optVals[ds]) >= i+1:
					optGenVals[j][ds].append(optVals[ds][i])

################################################################################
#get pareto frontier of all data
paretoVals = {s:[] for s in dataStrings}
pareto_outputs = ["postprocess.response_1", "postprocess.response_2", "postprocess.response_3", "postprocess.response_4", "postprocess.response_6"]
pOut_names = {"postprocess.response_1": '$\Phi$', "postprocess.response_2": 'Hover FoM', "postprocess.response_3": 'L/D', "postprocess.response_4": '$\eta_P$', "postprocess.response_6": 'Inst. HP'}
pOut_ranges = {"postprocess.response_1": [1,9], "postprocess.response_2": [0.4,1.0], "postprocess.response_3": [5,20], "postprocess.response_4": [0.4,0.9], "postprocess.response_6": [2000,6000]}

pareto_outputs_POS = ["postprocess.response_1_POS", "postprocess.response_2_POS", "postprocess.response_3_POS", "postprocess.response_4_POS", "postprocess.response_6_POS"]
pOutPOS_names = {"postprocess.response_1_POS": '$\Phi$', "postprocess.response_2_POS": 'Hover FoM', "postprocess.response_3_POS": 'L/D', "postprocess.response_4_POS": '$\eta_P$', "postprocess.response_6_POS": 'Inst. HP'}

"""
objs = [] #build list of objectives in list
for i in range(len(dataVals[pareto_outputs[0]])): objs.append([i, [dataVals[p][i] for p in pareto_outputs], [], 0])
F = sortData(objs)
print "Paerto Front Lengths - 1: %d, 2: %d, 3:%d" % (len(F[0]), len(F[1]), len(F[2]))
print "P1:", F[0]
print "P2:", F[1]
print "P3:", F[2]

objs1 = [] #build list of objectives in list
for i in range(len(dataVals[pareto_outputs_POS[0]])): objs1.append([i, [dataVals[p][i] for p in pareto_outputs_POS], [], 0])
F1 = sortData(objs1)
print "POS: Paerto Front Lengths - 1: %d, 2: %d, 3:%d" % (len(F1[0]), len(F1[1]), len(F1[2]))
print "POS_P1:", F1[0]
print "POS_P2:", F1[1]
print "POS_P3:", F1[2]
"""

####$$$$$$
#i_P0 = [24, 92, 224, 226, 232, 234, 241, 242, 267, 268, 275, 276, 283, 286, 292, 294, 300, 302, 309, 310, 332, 335, 340, 343, 354, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1089, 1092, 1136, 1138, 1141, 1144, 1146, 1149, 1153, 1154, 1157, 1160, 1278, 1286, 1372, 1380, 1426, 1433, 1436, 1443, 1453, 1463, 1473, 1482, 1485, 1492, 1495, 1498, 1502, 1507, 1538, 1540, 1546, 1548, 1554, 1556, 1562, 1564, 1570, 1572, 1582, 1590, 1596, 1632, 1634, 1640, 1642, 1648, 1650, 1656, 1658, 1664, 1666, 1674, 1677, 1682, 1685, 2418, 2426, 2444, 2452, 2460, 2468, 2486, 2494, 2508, 2510, 2512, 2516, 2518, 2520, 2526, 2528, 2534, 2536, 2538, 2542, 2548, 2560, 2566, 2602, 2606, 2608, 2610, 2614, 2616, 2618, 2624, 2626, 2632, 2634, 2636, 2824, 2842, 3457, 3475, 3493, 3511, 3519, 3537, 3555, 3563, 3573, 3586, 3591, 3604, 3609, 3617, 3627, 3645, 3653, 3671, 3689, 3707, 3720, 3722, 3724, 3732, 3738, 3740, 3742, 3748, 3750, 3752, 3760, 3762, 3766, 3768, 3770, 3784, 3786, 3788, 3792, 3794, 3818, 3830, 3836, 3858, 3860, 3864, 3866, 3868, 3882, 3884, 3886, 3890, 3892, 4036, 4038, 4054, 4056, 4098, 4100, 4116, 4118, 4236, 4254, 4292, 4299, 4305, 4307, 4310, 4317, 4318, 4325, 4341, 4343, 4370, 4388, 4426, 4433, 4439, 4441, 4444, 4451, 4452, 4459, 4475, 4477, 4581, 4603, 4613, 4664, 4682, 4690, 4698, 4700, 4705, 4716, 4718, 4723, 4726, 4731, 4739, 4744, 4749, 4760, 4762, 4767, 4778, 4780, 4785, 4788, 4798, 4816, 4834, 4839, 4852, 4857, 4860, 4863, 4865, 4873, 4878, 4881, 4883, 4891, 4896, 4901, 4914, 4919, 4922, 4932, 4936, 4944, 4950, 4958, 4960, 4962, 4966, 4984, 5026, 5030, 5034, 5042, 5048, 5056, 5058, 5060, 5829, 5847, 5855, 5891, 5909, 5963, 5971, 5981, 5989, 6025, 6043, 6134, 6142, 6202, 6210, 6380, 6388, 6422, 6430, 6851, 6859, 8060, 8062, 8068, 8070, 8076, 8102, 8104, 8110, 8112, 8596, 8600, 8602, 8610, 8614, 8618, 8620, 8623, 8626, 8628, 8636, 8638, 8644, 8646, 8654, 8662, 8664, 8670, 8672, 8680, 8688, 8694, 8698, 8700, 8708, 8712, 8716, 8718, 8721, 8724, 8726, 8734, 8736, 8742, 8744, 8752, 8760, 8762, 8768, 8770, 8778, 8786, 9062, 9070, 9074, 9080, 9088, 9098, 9102, 9116, 9120, 9124, 9142, 9150, 9160, 9162, 9164, 9178, 9180, 9182, 9186, 9188, 9196, 9204, 9208, 9214, 9222, 9232, 9236, 9250, 9254, 9258, 9276, 9284, 9294, 9296, 9298, 9312, 9314, 9316, 9320, 9322, 9334, 9342, 9352, 9358, 9360, 9368, 9370, 9376, 9378, 9386, 9394, 9396, 9402, 9404, 9412, 9420, 9432, 9440, 9450, 9456, 9458, 9466, 9468, 9474, 9476, 9484, 9492, 9494, 9500, 9502, 9510, 9518, 9896, 9914, 10030, 10048, 10065, 10067, 10068, 10073, 10074, 10077, 10081, 10083, 10089, 10091, 10093, 10097, 10099, 10105, 10107, 10108, 10113, 10115, 10116, 10121, 10123, 10124, 10126, 10129, 10131, 10134, 10137, 10138, 10142, 10145, 10147, 10153, 10155, 10157, 10159, 10161, 10163, 10166, 10169, 10171, 10172, 10175, 10177, 10179, 10180, 10183, 10185, 10187, 10200, 10210, 10716, 10719, 10720, 10724, 10727, 10728, 10732, 10735, 10736, 10740, 10743, 10744, 10746, 10748, 10751, 10752, 10754, 10756, 10759, 10760, 10762, 10767, 10768, 10780, 10783, 10784, 10788, 10791, 10792, 10796, 10799, 10800, 10804, 10807, 10808, 10810, 10812, 10815, 10816, 10818, 10820, 10823, 10824, 10826, 10831, 10832, 11356, 11358, 11360, 11364, 11366, 11369, 11374, 11380, 11382, 11388, 11390, 11396, 11398, 11404, 11406, 11412, 11414, 11420, 11422, 11428, 11430, 11438, 11444, 11446, 11450, 11452, 11454, 11458, 11460, 11462, 11466, 11468, 11470, 11476, 11478, 11966, 11970, 11974, 11978, 11982, 11990, 11994, 11996, 11998, 12006, 12008, 12010, 12014, 12016, 12018, 12022, 12030, 12036, 12039, 12044, 12054, 12058, 12062, 12066, 12070, 12078, 12082, 12084, 12086, 12094, 12096, 12098, 12102, 12104, 12106, 12110, 12118, 12124, 12127, 12132, 12138, 12142, 12146, 12150, 12154, 12158, 12166, 12174, 12178, 12182, 12186, 12190, 12194, 12198, 12206, 12214, 12222]
#i_P1 = [225, 233, 240, 266, 274, 269, 277, 284, 293, 301, 308, 316, 324, 333, 341, 348, 334, 342, 216, 1069, 1077, 1071, 1079, 1073, 1081, 1085, 1087, 1088, 1137, 1145, 1139, 1147, 1140, 1148, 1152, 1155, 1156, 1294, 1388, 1432, 1442, 1452, 1462, 1475, 1472, 1478, 1488, 1484, 1494, 1506, 1541, 1549, 1555, 1563, 1450, 1460, 1557, 1565, 1571, 1430, 1440, 1470, 1539, 1547, 1573, 1583, 1591, 1598, 1580, 1588, 1597, 1635, 1643, 1649, 1657, 1651, 1659, 1665, 1633, 1641, 1667, 1675, 1683, 1690, 1676, 1684, 1693, 2419, 2427, 2445, 2453, 2487, 2495, 2543, 2561, 2640, 2658, 2646, 2664, 2700, 2513, 2530, 2611, 2628, 2517, 2615, 2519, 2617, 2521, 2556, 2619, 2654, 2509, 2527, 2607, 2625, 2511, 2529, 2609, 2627, 2535, 2570, 2588, 2633, 2668, 2686, 2537, 2635, 2620, 2630, 2748, 2770, 3730, 3828, 2850, 3450, 3468, 3483, 4669, 4687, 3512, 3530, 3545, 6877, 6885, 6893, 6901, 3581, 758, 766, 776, 3584, 3589, 3602, 3607, 6849, 6857, 3610, 3615, 8519, 3620, 3638, 3646, 3651, 3664, 3669, 3679, 3715, 3723, 3741, 3820, 3838, 3725, 3743, 3822, 3840, 3749, 3846, 3751, 3848, 3850, 3733, 3831, 3746, 3844, 3754, 3761, 3859, 3767, 3865, 3763, 3769, 3861, 3867, 3758, 3785, 3802, 3856, 3883, 3900, 3787, 3885, 3771, 3793, 3869, 3891, 3795, 3893, 4037, 4055, 4062, 4039, 4057, 4064, 4237, 4255, 4371, 4389, 4279, 4304, 4413, 4438, 4293, 4311, 4427, 4445, 4462, 4480, 4297, 4298, 4315, 4316, 4335, 4353, 4431, 4432, 4449, 4450, 4469, 4487, 4340, 4474, 4578, 4580, 4600, 4602, 4738, 4752, 4724, 4730, 4742, 4748, 4757, 7343, 7351, 7437, 7445, 4786, 4766, 4784, 4793, 3452, 3470, 3587, 3605, 3612, 4799, 4817, 4824, 6846, 6854, 4837, 4855, 4872, 3648, 3666, 4727, 4745, 4861, 4879, 4886, 4858, 4862, 4864, 4876, 4880, 4882, 4867, 4884, 4889, 4890, 4927, 3684, 3702, 3710, 5064, 5082, 5124, 4937, 4954, 5035, 5052, 10085, 10149, 4046, 4048, 4945, 5043, 4994, 5012, 5092, 5110, 5190, 5208, 21, 243, 4959, 5057, 5164, 5182, 5216, 6136, 6144, 6204, 6212, 6402, 10213, 2324, 2332, 4263, 4397, 5822, 5840, 6757, 6765, 2340, 5848, 5917, 5865, 5883, 5884, 5902, 5927, 5945, 6033, 2416, 2424, 2434, 5827, 5845, 5961, 5979, 5853, 5982, 5984, 5987, 2476, 5889, 5907, 5999, 6017, 6023, 6041, 6051, 6061, 6079, 6150, 6218, 6092, 6100, 6108, 6160, 6168, 6176, 6396, 6867, 6940, 6948, 7008, 7016, 8063, 8071, 6982, 6990, 7050, 7058, 8118, 8611, 8709, 8597, 8615, 8695, 8713, 8601, 8619, 8699, 8717, 8603, 8621, 8701, 8719, 8622, 8720, 8627, 8725, 11372, 11436, 8629, 8727, 8639, 8737, 8645, 8743, 8647, 8745, 8637, 8655, 8735, 8753, 8665, 8763, 8671, 8769, 8673, 8771, 8663, 8681, 8761, 8779, 8689, 8787, 9132, 9266, 9068, 9075, 9136, 9172, 9202, 9209, 9270, 9306, 9089, 9223, 9099, 9117, 9233, 9251, 9190, 9324, 9161, 9179, 9187, 9295, 9313, 9321, 9343, 9441, 1075, 1083, 9335, 9353, 9433, 9451, 868, 936, 9359, 9457, 1090, 9361, 9459, 9377, 9475, 9371, 9379, 9469, 9477, 9369, 9387, 9467, 9485, 9397, 9495, 9405, 9503, 9395, 9413, 9493, 9511, 9403, 9421, 9501, 9519, 9922, 10056, 10069, 10132, 10076, 10141, 10125, 10062, 10127, 10064, 10128, 10066, 10130, 10070, 10135, 10072, 10136, 10075, 10139, 10078, 10143, 10080, 10144, 10082, 10146, 10088, 10152, 10090, 10154, 10092, 10156, 10095, 10158, 10096, 10160, 10098, 10162, 10167, 10104, 10168, 10106, 10170, 10109, 10173, 10111, 10174, 10112, 10176, 10114, 10178, 10117, 10181, 10119, 10182, 10120, 10184, 10122, 10186, 10201, 10211, 10717, 10781, 10718, 10782, 10721, 10785, 10725, 10789, 10726, 10790, 10729, 10793, 10734, 10798, 10737, 10801, 10733, 10741, 10797, 10805, 10745, 10809, 10747, 10811, 10749, 10813, 10742, 10750, 10806, 10814, 10753, 10817, 10755, 10819, 10757, 10764, 10821, 10828, 10758, 10822, 10761, 10825, 10763, 10827, 10766, 10830, 10769, 10833, 11361, 11424, 11368, 11433, 11357, 11421, 11359, 11423, 11365, 11429, 11367, 11431, 11375, 11439, 11381, 11445, 11383, 11447, 11386, 11451, 11389, 11453, 11391, 11455, 11459, 11397, 11461, 11399, 11463, 11402, 11467, 11474, 11405, 11469, 11407, 11471, 11413, 11477, 11415, 11479, 9806, 9940, 11967, 12055, 11968, 11972, 12056, 12060, 11976, 11980, 11983, 12064, 12068, 12071, 11997, 12085, 11999, 12087, 11962, 12050, 11960, 11964, 12015, 12048, 12052, 12103, 11988, 12004, 12076, 12092, 12023, 12111, 12028, 12031, 12116, 12119, 12038, 12047, 12126, 12135, 12037, 12045, 12125, 12133, 12144, 12148, 12152, 12155, 12156, 12159, 12162, 12011, 12099, 12136, 12140, 12143, 12184, 12187, 12188, 12191, 12019, 12107, 12160, 12164, 12168, 12172, 12176, 12180, 12183, 12192, 12195, 12196, 12199, 12034, 12042, 12122, 12130, 12218]
#i_P2 = [7004, 7072, 290, 298, 6942, 6950, 7010, 7018, 8061, 8069, 25, 93, 306, 6958, 7026, 8078, 317, 325, 349, 351, 1093, 1115, 1123, 1183, 1191, 1161, 1474, 1445, 1451, 1455, 1461, 1551, 1559, 1431, 1441, 1465, 1471, 1534, 1542, 1567, 1476, 1486, 1496, 1599, 1581, 1589, 1645, 1653, 1628, 1636, 1661, 1691, 1692, 2641, 2659, 2531, 2539, 2549, 2567, 2568, 2586, 2604, 2622, 2629, 2637, 2582, 2680, 2544, 2562, 2596, 2642, 2660, 2694, 2522, 2532, 2631, 3476, 4695, 4662, 4680, 3513, 3517, 3531, 3535, 8545, 8553, 692, 700, 786, 794, 3486, 3504, 3538, 6783, 6791, 6909, 734, 742, 3548, 3566, 8503, 8511, 8509, 8517, 774, 6865, 3625, 3643, 3672, 3677, 3708, 3713, 3918, 3940, 3821, 3839, 3916, 3938, 3721, 3739, 3819, 3823, 3837, 3841, 6228, 6238, 3950, 3847, 3948, 3780, 3849, 4992, 5010, 5018, 3954, 6248, 3772, 3778, 3876, 4084, 3728, 3759, 3826, 3857, 3960, 3982, 3782, 3796, 3803, 3810, 3880, 3894, 3901, 3908, 3992, 4014, 6135, 6143, 6203, 6211, 3804, 3902, 3790, 3888, 3962, 3984, 3789, 3887, 4980, 5006, 5078, 5104, 4044, 4063, 4099, 4117, 4124, 4065, 4101, 4119, 4126, 7301, 7309, 7395, 7403, 4278, 4412, 4319, 4453, 4488, 4323, 4457, 404, 412, 498, 506, 708, 716, 2366, 2374, 3597, 4273, 4291, 4296, 4314, 4324, 4407, 4425, 4430, 4448, 4458, 6799, 6807, 4361, 4495, 4546, 4568, 1446, 1456, 4549, 4571, 4574, 4576, 4579, 4596, 4598, 4601, 4610, 4612, 4625, 4647, 4657, 706, 714, 800, 802, 808, 810, 4725, 4729, 4743, 4747, 6891, 6899, 8551, 8559, 1252, 1260, 1346, 1354, 11027, 11115, 388, 396, 1236, 1244, 1330, 1338, 4750, 4756, 7327, 7335, 7421, 7429, 7359, 7453, 430, 438, 4792, 6752, 6760, 7296, 7304, 7390, 7398, 7484, 7494, 7600, 7608, 3453, 3471, 4665, 4683, 756, 764, 8504, 8512, 3478, 3613, 4825, 6847, 6855, 6862, 7694, 7702, 3514, 3532, 3594, 3622, 3640, 3649, 3667, 6888, 6896, 3674, 4708, 4734, 4753, 4770, 4835, 4853, 4887, 4897, 4915, 4923, 4859, 4877, 4866, 4885, 4871, 4888, 4925, 6118, 6126, 6186, 6194, 227, 235, 311, 4934, 4952, 4955, 4963, 5028, 5032, 5046, 5050, 5053, 5054, 5061, 10101, 10165, 4108, 4110, 4047, 4049, 5020, 5118, 6280, 6290, 20, 89, 285, 5154, 6444, 4262, 4396, 2318, 2326, 6773, 2334, 5849, 5910, 2350, 2358, 5858, 5876, 5953, 2417, 2425, 2435, 2322, 2330, 2412, 2420, 3455, 3473, 4234, 4252, 4368, 4386, 5956, 5958, 5974, 5976, 6018, 6036, 5850, 6020, 6038, 2432, 2458, 2466, 5969, 5983, 5863, 5881, 5915, 5997, 6015, 6044, 6046, 6049, 2502, 6087, 6438, 6956, 7024, 8086, 8094, 8598, 8616, 8696, 8714, 9332, 9350, 9430, 9448, 9328, 9346, 9426, 9444, 8624, 8722, 11373, 11437, 9354, 9452, 8676, 8682, 8684, 8690, 8774, 8780, 8782, 8788, 11400, 11408, 11464, 11472, 8650, 8656, 8748, 8754, 11384, 11448, 8660, 8678, 8758, 8776, 8634, 8652, 8668, 8686, 8732, 8750, 8766, 8784, 9106, 9240, 9072, 9206, 9110, 9130, 9137, 9244, 9264, 9271, 12000, 12088, 9168, 9302, 4328, 4346, 7369, 7377, 7463, 7471, 9920, 10054, 11498, 1091, 9388, 9486, 9366, 9385, 9464, 9483, 9414, 9422, 9512, 9520, 9392, 9410, 9490, 9508, 1131, 9380, 9400, 9418, 9478, 9498, 9516, 9890, 9908, 10024, 10042, 295, 303, 10133, 10140, 10060, 10063, 10274, 10298, 7992, 8000, 10071, 288, 296, 7994, 8002, 8058, 8066, 0, 6, 8, 14, 68, 76, 222, 230, 5326, 5344, 6944, 6952, 7012, 7020, 10282, 10079, 304, 16, 22, 84, 100, 108, 116, 124, 238, 244, 312, 5352, 6334, 6960, 7028, 8006, 10290, 8088, 8096, 10094, 10150, 252, 260, 10084, 10148, 42, 50, 262, 270, 336, 344, 6980, 6988, 7048, 7056, 8032, 8040, 8105, 8113, 10110, 10195, 2836, 319, 327, 5374, 10102, 10118, 10225, 10235, 10245, 2872, 5274, 1279, 1287, 1373, 1381, 4704, 4713, 4722, 4775, 10730, 10794, 11049, 11137, 3652, 3670, 10765, 10829, 3518, 3536, 3661, 3527, 3544, 11425, 11432, 10712, 10776, 10920, 852, 860, 920, 928, 1970, 1978, 11426, 666, 674, 854, 862, 922, 930, 1906, 1914, 2325, 2333, 7605, 7613, 9067, 9085, 9201, 9219, 10928, 11975, 12063, 869, 870, 937, 938, 1922, 9093, 9227, 10936, 11416, 11387, 11442, 4342, 4476, 4281, 4415, 10944, 11009, 11025, 11097, 11113, 11403, 11410, 11475, 1180, 1188, 11033, 11121, 1996, 2004, 4306, 4440, 9897, 9915, 10031, 10049, 9868, 10002, 9807, 9941, 12007, 12095, 4230, 4248, 4364, 4382, 11971, 11973, 12059, 12061, 11979, 11981, 12067, 12069, 9834, 9852, 9968, 9986, 11992, 11995, 12080, 12083, 12002, 12090, 11963, 12051, 2461, 2469, 11965, 12009, 12013, 12053, 12097, 12101, 2477, 12017, 12020, 12105, 12108, 11687, 11775, 12046, 12134, 12200, 12204, 12208, 12212, 12216, 12220, 12147, 12149, 12157, 12170, 12139, 12141, 12189, 12179, 12167, 12175, 12181, 12197, 12202]

i_P0 = [1069, 1071, 1077, 1079, 1137, 1139, 1145, 1147, 1432, 1442, 1444, 1450, 1452, 1454, 1460, 1462, 1464, 1470, 1472, 1474, 1484, 1494, 1506, 1540, 1548, 1550, 1556, 1558, 1564, 1634, 1642, 1650, 1658, 1676, 1684, 2511, 2513, 2519, 2521, 2529, 2605, 2609, 2611, 2617, 2619, 2623, 2627, 2707, 2729, 2787, 2809, 2827, 2829, 2837, 2845, 2847, 2925, 2927, 2943, 2945, 3719, 3733, 3737, 3769, 3795, 3831, 3867, 3893, 4035, 4039, 4041, 4047, 4049, 4053, 4057, 4059, 4137, 4155, 4937, 4945, 5029, 5035, 5043, 5047, 6091, 6097, 6099, 6105, 6159, 6165, 6167, 6173, 6383, 6391, 8063, 8071, 8597, 8601, 8603, 8611, 8615, 8619, 8621, 8637, 8645, 8647, 8655, 8663, 8671, 8673, 8681, 8695, 8699, 8701, 8709, 8713, 8717, 8719, 8735, 8743, 8745, 8753, 8761, 8769, 8771, 8779, 9329, 9335, 9343, 9347, 9353, 9367, 9369, 9371, 9377, 9379, 9385, 9387, 9393, 9395, 9397, 9405, 9411, 9413, 9415, 9421, 9427, 9433, 9441, 9445, 9451, 9465, 9467, 9469, 9475, 9477, 9483, 9485, 9491, 9493, 9495, 9503, 9509, 9511, 9513, 9519, 10067, 10069, 10075, 10085, 10089, 10091, 10097, 10099, 10101, 10105, 10107, 10113, 10115, 10123, 10131, 10139, 10149, 10151, 10153, 10155, 10159, 10161, 10163, 10165, 10167, 10169, 10171, 10175, 10177, 10179, 10187, 10715, 10717, 10719, 10721, 10731, 10733, 10735, 10737, 10741, 10745, 10747, 10751, 10753, 10755, 10757, 10759, 10761, 10779, 10781, 10783, 10785, 10795, 10797, 10799, 10801, 10805, 10809, 10811, 10815, 10817, 10819, 10821, 10823, 10825, 11359, 11361, 11367, 11381, 11383, 11397, 11399, 11405, 11407, 11423, 11431, 11443, 11445, 11447, 11451, 11459, 11461, 11463, 11467, 11469, 11471]
i_P1 = [1068, 1076, 1085, 1070, 1078, 1087, 1136, 1144, 1153, 1138, 1146, 1433, 1443, 1445, 1455, 1465, 1473, 1453, 1463, 1475, 1485, 1495, 1507, 1541, 1549, 1582, 1590, 1551, 1559, 1566, 1557, 1565, 1572, 1635, 1643, 1651, 1659, 1666, 1677, 1685, 1692, 2512, 2531, 2610, 2629, 2518, 2616, 2520, 2583, 2618, 2681, 2507, 2525, 2604, 2622, 2509, 2510, 2517, 2527, 2528, 2537, 2571, 2589, 2607, 2608, 2615, 2625, 2626, 2635, 2639, 2669, 2687, 2709, 2731, 3723, 3741, 4935, 4953, 5033, 5051, 6095, 6103, 6163, 6171, 2711, 2723, 2733, 2745, 5131, 5149, 6231, 6241, 2755, 2767, 2777, 2799, 2821, 7791, 7799, 7859, 7867, 7927, 7935, 2823, 2841, 7793, 7801, 7861, 7869, 3817, 3835, 3732, 3830, 3768, 3866, 3794, 3892, 4046, 4109, 4048, 4085, 4111, 2825, 2843, 2921, 2923, 2939, 2941, 4037, 4038, 4055, 4056, 4065, 4101, 4119, 2831, 4034, 4052, 4133, 4135, 4151, 4153, 4936, 4955, 5034, 5053, 4944, 4981, 5007, 5042, 5079, 5105, 4931, 4949, 6133, 6141, 6201, 6209, 6945, 6953, 7013, 7021, 6379, 6381, 6387, 6389, 5327, 5345, 7231, 7239, 8065, 8073, 8600, 8618, 8698, 8716, 8602, 8620, 8700, 8718, 8644, 8742, 8646, 8744, 8636, 8654, 8734, 8752, 8670, 8768, 8672, 8770, 8662, 8680, 8689, 8760, 8778, 8787, 9342, 9440, 10275, 10921, 11551, 9328, 9346, 9426, 9444, 9334, 9352, 9432, 9450, 11559, 9375, 9473, 9389, 9487, 9376, 9474, 9370, 9378, 9468, 9476, 9366, 9384, 9464, 9482, 9368, 9386, 9466, 9484, 9396, 9494, 9404, 9502, 11391, 11455, 9392, 9410, 9490, 9508, 9381, 9394, 9412, 9479, 9492, 9510, 9423, 9521, 9420, 9518, 10068, 10077, 10133, 8610, 8708, 10066, 10130, 10074, 10138, 10084, 10148, 10087, 10088, 10152, 10090, 10154, 10150, 10158, 10096, 10160, 10098, 10162, 10100, 10164, 10166, 10104, 10168, 10106, 10170, 10111, 10174, 10183, 10112, 10121, 10176, 10185, 10114, 10178, 10122, 10186, 10714, 10778, 10716, 10780, 10718, 10782, 10720, 10784, 10730, 10739, 10794, 10803, 10734, 10798, 10736, 10800, 10732, 10740, 10796, 10804, 10746, 10810, 10750, 10814, 10744, 10752, 10808, 10816, 10754, 10763, 10818, 10827, 10756, 10765, 10820, 10829, 10758, 10767, 10822, 10831, 10760, 10769, 10824, 10833, 11360, 11369, 11425, 10713, 10777, 11358, 11422, 11366, 11430, 11379, 11380, 11444, 11382, 11446, 11442, 11450, 11458, 11396, 11460, 11398, 11462, 11395, 11403, 11466, 11475, 11404, 11413, 11468, 11477, 11406, 11470]
i_P2 = [1073, 1081, 1141, 1149, 1084, 1093, 1086, 1152, 1161, 1155, 1583, 1591, 1598, 1567, 1430, 1440, 1573, 1644, 1652, 1632, 1640, 1667, 1693, 7, 15, 227, 235, 2530, 2539, 2575, 2593, 2613, 2628, 2637, 2749, 2759, 2771, 2855, 2891, 2909, 2947, 3725, 3743, 3761, 3787, 3859, 3885, 4043, 4067, 4083, 4103, 4121, 4139, 4157, 5028, 5037, 5046, 5231, 5249, 6317, 6325, 6382, 6385, 6390, 6393, 6399, 8596, 8614, 8694, 8712, 10061, 10125, 2557, 2582, 2655, 2680, 3718, 3736, 3781, 6090, 6098, 6158, 6166, 6311, 6319, 2506, 2524, 2631, 2781, 2803, 2508, 2526, 2535, 2606, 2624, 2633, 2516, 2536, 2614, 2634, 2541, 2638, 3821, 3839, 5063, 5163, 5165, 5181, 5183, 2857, 6093, 6101, 6111, 6161, 6169, 6179, 6315, 6323, 8059, 8061, 8067, 8069, 3923, 3945, 6235, 6245, 7929, 7937, 2822, 2840, 2885, 2903, 7163, 7165, 7171, 7173, 10707, 10771, 4108, 2836, 4084, 4110, 2824, 2842, 2887, 2905, 2920, 2938, 2922, 2940, 4036, 4054, 6094, 6102, 6162, 6170, 4064, 4100, 4118, 4127, 4061, 4097, 4115, 4134, 4152, 4197, 4215, 2828, 2846, 4040, 4058, 4954, 4961, 4963, 5052, 5059, 5061, 5267, 5285, 5006, 5104, 6378, 6386, 6380, 6388, 8627, 8725, 8629, 8639, 8665, 8727, 8737, 8763, 8688, 8786, 10274, 10945, 10961, 11575, 9333, 9337, 9351, 9355, 9363, 9383, 9409, 9431, 9435, 9449, 9453, 9461, 9481, 9507, 10277, 10923, 11553, 9361, 9459, 10283, 10929, 11353, 11377, 11393, 11417, 11441, 11457, 9388, 9486, 10299, 9374, 9472, 11389, 11453, 9414, 9512, 10315, 11390, 11454, 9419, 9517, 9380, 9478, 9403, 9501, 10076, 2826, 2844, 2867, 2889, 2893, 2907, 2929, 2987, 3005, 8633, 8651, 8677, 8731, 8749, 8775, 9407, 9505, 10109, 10132, 10141, 10173, 10083, 10147, 10095, 10086, 10110, 10103, 10119, 10182, 10120, 10184, 2873, 2899, 5275, 10723, 10787, 10725, 10789, 10727, 10791, 1075, 1083, 1703, 1711, 10729, 10793, 10743, 10807, 10738, 10802, 4574, 4580, 4596, 4602, 4606, 4612, 1236, 1244, 1252, 1260, 1278, 1286, 1330, 1338, 1346, 1354, 1372, 1380, 4706, 4712, 4724, 4730, 4732, 4738, 4742, 4748, 4840, 4844, 4846, 4864, 4866, 4870, 4872, 4882, 4888, 4902, 1466, 4884, 11048, 11136, 10762, 10826, 10749, 10764, 10813, 10828, 10766, 10830, 10768, 10832, 11368, 11424, 11433, 10712, 10776, 10920, 11375, 11439, 11387, 11378, 11008, 11024, 11096, 11112, 11402, 11411, 11474, 11412, 11476]

#i_P0_POS = [4, 12, 44, 52, 72, 80, 112, 120, 288, 290, 292, 296, 298, 300, 332, 334, 340, 342, 350, 1700, 1708, 1768, 1776, 2512, 2520, 2610, 2618, 3722, 3740, 3784, 3802, 3820, 3838, 3882, 3900, 4038, 4056, 4100, 4118, 6094, 6102, 6110, 6136, 6144, 6162, 6170, 6178, 6204, 6212, 6378, 6382, 6386, 6390, 6420, 6424, 6426, 6428, 6432, 6434, 6440, 7790, 7798, 7858, 7866, 8600, 8618, 8626, 8668, 8670, 8672, 8698, 8716, 8724, 8766, 8768, 8770, 9328, 9346, 9354, 9392, 9400, 9404, 9426, 9444, 9452, 9490, 9498, 9502, 9627, 9645, 9761, 9779, 9895, 9913, 10029, 10047, 10068, 10084, 10088, 10094, 10096, 10103, 10106, 10111, 10112, 10132, 10148, 10152, 10158, 10160, 10167, 10170, 10175, 10176, 10718, 10782, 11356, 11364, 11372, 11378, 11380, 11382, 11388, 11404, 11412, 11420, 11428, 11436, 11442, 11444, 11446, 11452, 11468, 11476]
#i_P1_POS = [2, 6, 10, 14, 20, 22, 46, 54, 70, 74, 78, 82, 88, 90, 114, 122, 140, 150, 28, 36, 60, 96, 104, 128, 192, 202, 289, 297, 291, 293, 299, 301, 316, 324, 348, 335, 343, 351, 1701, 1709, 1769, 1777, 2513, 2611, 4936, 5034, 9396, 9494, 2521, 2619, 3724, 3742, 3822, 3840, 3918, 3940, 3786, 3810, 3884, 3908, 3994, 4016, 4039, 4057, 4101, 4119, 4126, 6095, 6103, 6163, 6171, 6230, 6240, 6111, 6179, 6152, 6220, 6282, 6292, 8660, 8758, 6379, 6384, 6387, 6392, 6383, 6391, 6421, 6429, 6425, 6433, 6427, 6435, 6398, 6441, 7791, 7799, 7859, 7867, 2530, 2628, 8601, 8619, 8664, 8682, 8699, 8717, 8762, 8780, 11360, 11424, 11368, 11376, 11432, 11440, 8642, 8740, 8644, 8742, 8646, 8744, 9329, 9347, 9427, 9445, 9374, 9472, 9378, 9476, 9629, 9647, 9655, 9763, 9781, 9789, 9894, 9912, 10028, 10046, 10069, 10076, 10133, 10140, 10100, 10164, 10104, 10168, 10087, 10151, 10090, 10154, 10110, 10174, 10113, 10114, 10120, 10177, 10178, 10184, 10719, 10726, 10757, 10783, 10790, 10821, 10281, 11362, 11365, 11426, 11429, 11394, 11458, 11396, 11460, 11398, 11462, 7832, 7840, 7900, 7908, 10321, 11400, 11402, 11464, 11466, 1716, 1784, 7806, 7874, 11386, 11389, 11450, 11453]
#i_P2_POS = [5, 13, 73, 81, 18, 86, 30, 38, 45, 48, 53, 56, 62, 98, 106, 113, 116, 121, 124, 130, 190, 200, 212, 330, 338, 294, 302, 318, 326, 333, 336, 341, 344, 306, 308, 1702, 1710, 1770, 1778, 4937, 5035, 9370, 9397, 9468, 9495, 4944, 5042, 3720, 3723, 3738, 3741, 3818, 3821, 3836, 3839, 3785, 3803, 3883, 3901, 3748, 3846, 4026, 4040, 4058, 4102, 4120, 4064, 4127, 6096, 6104, 6137, 6145, 6164, 6172, 6205, 6213, 8062, 8070, 11366, 11430, 6228, 6231, 6238, 6241, 6112, 6180, 6120, 6128, 6188, 6196, 6302, 2012, 2020, 6385, 6393, 6380, 6388, 6422, 6430, 6399, 6436, 6442, 7792, 7800, 7860, 7868, 8602, 8620, 8700, 8718, 2538, 2636, 8627, 8638, 8725, 8736, 8690, 8788, 9414, 9512, 11361, 11425, 11392, 11456, 8669, 8767, 9402, 9500, 8673, 8771, 9161, 9179, 9187, 9295, 9313, 9321, 9355, 9453, 9405, 9503, 9893, 9911, 9919, 10027, 10045, 10053, 9622, 9640, 9756, 9774, 9897, 9915, 9923, 10031, 10049, 10057, 10077, 10141, 10085, 10149, 10089, 10153, 10086, 10150, 10107, 10171, 10118, 10182, 10108, 10172, 10115, 10179, 10097, 10121, 10122, 10161, 10185, 10186, 1136, 1138, 1144, 1146, 10714, 10717, 10721, 10754, 10759, 10778, 10781, 10785, 10818, 10823, 10848, 11557, 10727, 10791, 10765, 10829, 10897, 10898, 10280, 7926, 7934, 11490, 11363, 11427, 11379, 11381, 11443, 11445, 11383, 11447, 7833, 7841, 7848, 7901, 7909, 7916, 11597, 10320, 11405, 11469, 7968, 7976, 10756, 10820, 11403, 11410, 11467, 11474, 11530, 1717, 1785, 7807, 7875, 11384, 11448]

i_P0_POS = [1, 3, 6, 9, 11, 14, 69, 71, 74, 77, 79, 82, 289, 291, 297, 299, 308, 350, 2513, 2520, 2611, 2618, 3721, 3723, 3739, 3741, 3819, 3821, 3837, 3839, 4034, 4036, 4039, 4052, 4054, 4057, 6091, 6093, 6099, 6101, 6159, 6161, 6167, 6169, 6229, 6239, 6310, 6318, 6378, 6386, 6394, 6436, 6440, 8596, 8598, 8614, 8616, 8694, 8696, 8712, 8714, 9328, 9346, 9378, 9404, 9426, 9444, 9476, 9502, 9622, 9640, 9756, 9774, 9890, 9908, 10024, 10042, 10069, 10070, 10085, 10087, 10101, 10103, 10133, 10134, 10149, 10151, 10165, 10167]
i_P1_POS = [0, 8, 68, 76, 2, 10, 70, 78, 7, 15, 75, 83, 288, 296, 290, 298, 309, 351, 2512, 2610, 2521, 2619, 3720, 3738, 3818, 3836, 3725, 3743, 3762, 3788, 3823, 3841, 3860, 3886, 4035, 4053, 4037, 4055, 4041, 4059, 6092, 6100, 6160, 6168, 6311, 6319, 6379, 6387, 6395, 6437, 6398, 6441, 8597, 8615, 8695, 8713, 8599, 8617, 8697, 8715, 9329, 9330, 9347, 9348, 9427, 9428, 9445, 9446, 9379, 9405, 9477, 9503, 9623, 9641, 9757, 9775, 9891, 9909, 10025, 10043, 10068, 10132, 10071, 10135, 10084, 10100, 10148, 10164, 10086, 10102, 10150, 10166]
i_P2_POS = [25, 93, 18, 60, 86, 128, 4, 12, 72, 80, 304, 314, 322, 330, 338, 354, 4042, 4078, 4104, 348, 3719, 3737, 3746, 3817, 3835, 3844, 3724, 3742, 3822, 3840, 3763, 3861, 3789, 3887, 4060, 4062, 4122, 4125, 4040, 4058, 6312, 6320, 6380, 6388, 6403, 6420, 6428, 6444, 6399, 8600, 8618, 8622, 8630, 8676, 8698, 8716, 8720, 8728, 8774, 8660, 8758, 4937, 4944, 5035, 5042, 8059, 8067, 9354, 9362, 9390, 9396, 9408, 9416, 9452, 9460, 9488, 9494, 9506, 9514, 10715, 10716, 10763, 10779, 10780, 10827, 10923, 11361, 11425, 9331, 9349, 9429, 9447, 10925, 9648, 9782, 9892, 9910, 9916, 9918, 10026, 10044, 10050, 10052, 9628, 9646, 9654, 9762, 9780, 9788, 9896, 9914, 9922, 10030, 10048, 10056, 6090, 6098, 6158, 6166, 6326, 6368, 10077, 10117, 10141, 10181, 2825, 2843, 10088, 10090, 10104, 10106, 10152, 10154, 10168, 10170]

###$$$$$$

GWTs = [float(x) for x in dataVals["postprocess.response_5"] if x <> 'None']
Ps   = [-float(x) for x in dataVals["postprocess.response_6"] if x <> 'None']
VHs  = [float(x) for x in dataVals["postprocess.response_7"] if x <> 'None']
GWTs_opt = [float(x) for x in optGenVals[-1]["postprocess.response_5"] if x <> 'None']
Ps_opt   = [-float(x) for x in optGenVals[-1]["postprocess.response_6"] if x <> 'None']
VHs_opt  = [float(x) for x in optGenVals[-1]["postprocess.response_7"] if x <> 'None']


#red - incompatible, blue - compatible
compatColors = []
for x in dataVals["compatibility.compatibility"]:
	if x == '1' or x == 1: compatColors.append('y')
	if x == '0' or x == 0: compatColors.append('b')
compatColors_opt = []
for x in optVals["compatibility.compatibility"]:
	if x == '1' or x == 1: compatColors_opt.append('y')
	if x == '0' or x == 0: compatColors_opt.append('r')

colors = ['r','orange', 'yellow', 'green', 'b', 'c', 'purple']

################################################################################
################################################################################


#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#			TEST OPTIMIZATION
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
"""
## CHECK POINTS TO ENSURE OPT VALS == BASE DATA VALS: (GOOD!)
rand_select = random.sample(range(len(optVals[optionVals[0]])), 500)
for i in rand_select:
	opts = [int(optVals[key][i]) for key in optionVals]
	pts = [round(optVals[key][i],3) for key in pareto_outputs]
	#if 0 in opts:
		#print "ZERO! OPTVALS", opts, ":", [round(float(optVals[key][j]),2) for key in pareto_outputs]

	for j in range(len(dataVals[optionVals[0]])):
		opts1 = [int(dataVals[key][j]) for key in optionVals]
		pts = [round(dataVals[key][j],3) for key in pareto_outputs]
		if opts == opts1:
			print "DATAVALS", opts1, ":", [round(float(dataVals[key][j]),2) for key in pareto_outputs]
			print " OPTVALS", opts, ":", [round(float(optVals[key][i]),2) for key in pareto_outputs]
			print ""
"""

ptoOpts_base = [[int(optGenVals[-1][key][i]) for key in optionVals] for i in range(len(optGenVals[-1][optionVals[0]])) if optGenVals[-1]['compatibility.compatibility'][i] == 0]
ptoOpts_= copy.deepcopy(ptoOpts_base)
ptoOpts_incomp = [[int(optGenVals[-1][key][i]) for key in optionVals] for i in range(len(optGenVals[-1][optionVals[0]])) if optGenVals[-1]['compatibility.compatibility'][i] == 1]

print "Set of Pareto Points:"
ptoOpts_.sort(key=lambda x: x[8])
ptoOpts_.sort(key=lambda x: x[7])
ptoOpts_.sort(key=lambda x: x[6])
ptoOpts_.sort(key=lambda x: x[5])
ptoOpts_.sort(key=lambda x: x[4])
ptoOpts_.sort(key=lambda x: x[3])
ptoOpts_.sort(key=lambda x: x[2])
ptoOpts_.sort(key=lambda x: x[1])
ptoOpts_.sort(key=lambda x: x[0])
#for s in ptoOpts_: print s
print "Length of Pareto Set:", len(ptoOpts_)
print "Incompatible Alts Pareto Set:", len(ptoOpts_incomp)
i = 0
while i < len(ptoOpts_):
	flag = 0
	for j in range(len(ptoOpts_)): 
		if ptoOpts_[j] == ptoOpts_[i] and i <> j:
			flag = 1
			ptoOpts_.pop(j)
			break
	if flag == 0: i = i + 1
print "Unique Architectures:", len(ptoOpts_)	
for alt in ptoOpts_: 
	print alt,
	print optGenVals[-1]['postprocess.fuzzyPOS'][ptoOpts_base.index(alt)]
print "Min FPoS:", min(optGenVals[-1]['postprocess.fuzzyPOS']),
print "Max FPoS:", max(optGenVals[-1]['postprocess.fuzzyPOS'])

#print 'ptoOpts_c = ', ptoOpts_
#print 'ptoFOSs_c = ', [optGenVals[-1]['postprocess.fuzzyPOS'][ptoOpts_base.index(alt)] for alt in ptoOpts_]
ptoOpts_c =  [[2, 1, 1, 2, 1, 1, 1, 4, 4], [2, 1, 1, 5, 1, 1, 1, 1, 4], [2, 1, 1, 5, 1, 1, 3, 1, 4], [2, 2, 1, 1, 1, 1, 1, 2, 4], [2, 2, 1, 1, 1, 1, 1, 4, 4], [2, 2, 1, 1, 1, 1, 3, 2, 4], [2, 2, 1, 2, 1, 1, 1, 2, 4], [2, 2, 1, 2, 1, 1, 1, 4, 4], [2, 2, 1, 2, 1, 1, 3, 4, 4], [2, 2, 1, 2, 3, 1, 2, 1, 4], [2, 2, 1, 4, 1, 1, 1, 1, 1], [2, 2, 1, 4, 1, 1, 2, 1, 4], [2, 2, 1, 4, 1, 1, 3, 2, 1], [2, 2, 1, 4, 1, 1, 3, 4, 4], [2, 2, 1, 4, 3, 1, 2, 1, 4], [3, 1, 1, 1, 1, 1, 3, 1, 4], [3, 1, 1, 2, 1, 1, 1, 1, 4], [3, 1, 1, 2, 1, 1, 1, 2, 4], [3, 1, 1, 2, 1, 1, 3, 1, 4], [3, 1, 1, 2, 1, 1, 3, 2, 4], [3, 1, 1, 3, 1, 1, 1, 2, 4], [3, 1, 1, 3, 1, 1, 3, 2, 4], [3, 1, 1, 4, 1, 1, 1, 1, 4], [3, 1, 1, 4, 1, 1, 3, 1, 4], [3, 1, 1, 5, 1, 1, 1, 1, 4], [3, 1, 1, 5, 1, 1, 3, 1, 4], [3, 2, 1, 2, 1, 1, 1, 2, 4], [3, 2, 1, 2, 1, 1, 3, 2, 4], [6, 1, 1, 1, 1, 1, 3, 1, 4], [6, 1, 1, 1, 1, 1, 3, 2, 1], [6, 1, 1, 1, 3, 1, 2, 2, 4], [6, 1, 1, 2, 1, 1, 3, 1, 4], [6, 1, 1, 2, 1, 1, 3, 2, 1], [6, 1, 1, 2, 3, 1, 2, 1, 4], [6, 1, 1, 2, 3, 1, 2, 2, 4], [6, 1, 1, 4, 1, 1, 3, 1, 4], [6, 1, 1, 4, 1, 1, 3, 2, 4], [6, 2, 1, 1, 1, 1, 3, 1, 4], [6, 2, 1, 1, 1, 1, 3, 2, 1], [6, 2, 1, 2, 1, 1, 3, 1, 4], [6, 2, 1, 2, 1, 1, 3, 2, 1], [6, 2, 1, 2, 3, 1, 3, 1, 4], [6, 2, 1, 4, 1, 1, 3, 1, 4], [6, 2, 1, 4, 1, 1, 3, 2, 4]]
ptoFOSs_c =  [0.44681410298934254, 0.03836017659965617, 0.03836017659965617, 0.03836021495987113, 0.03836021495987113, 0.03836021495987113, 0.03836021495987113, 0.03836021495987113, 0.03836021495987113, 0.03836021495987113, 0.03836017659965617, 0.03836017659965617, 0.03836017659965617, 0.03836017659965617, 0.03836017659965617, 0.31960280552708287, 0.31960280552708287, 0.2829155790331652, 0.31960280552708287, 0.2829155790331652, 0.0004953040507937371, 0.0004953040507937371, 0.004628390854390218, 0.004628390854390218, 0.004628390854390218, 0.004628390854390218, 0.004628395482785701, 0.004628395482785701, 0.681147068984693, 0.09806151545928017, 0.6938215382258733, 0.681147068984693, 0.09806151545928017, 0.6938215382258733, 0.6938215382258733, 0.0014154620778058873, 0.0014154620778058873, 0.3770844619432855, 0.31514751122037465, 0.3770844619432855, 0.31514751122037465, 0.6938215382258733, 0.0014154620778058873, 0.0014154620778058873]

### ANALYSE MAJOR OPTIONS:
majorOpt1 = ["compatibility.option1", "compatibility.option4", "compatibility.option7", "compatibility.option8", "compatibility.option9"]
print "Major Functional Group 1:",
for m in majorOpt1: print ASPECT_list[optionVals.index(m)],
print ""
ptoOpts_1 = [tuple([int(optGenVals[-1][key][i]) for key in majorOpt1]) for i in range(len(optGenVals[-1][majorOpt1[0]])) if optGenVals[-1]['compatibility.compatibility'][i] == 0]
ptoOpts_1set = list(set(ptoOpts_1))
ptoOpts_1set.sort(key=lambda x: x[4])
ptoOpts_1set.sort(key=lambda x: x[3])
ptoOpts_1set.sort(key=lambda x: x[2])
ptoOpts_1set.sort(key=lambda x: x[1])
ptoOpts_1set.sort(key=lambda x: x[0])
print 'From', len(ptoOpts_1), 'total -', len(ptoOpts_1set), 'combinations:'
pFOSs_1 = []
for p in ptoOpts_1set: 
	print p,
	print 'FPos: %.4f' % np.average([optGenVals[-1]['postprocess.fuzzyPOS'][i] for i in range(len(optGenVals[-1][majorOpt1[0]])) if tuple([int(optGenVals[-1][key][i]) for key in majorOpt1]) == p]),
	print ': %.d alts' % len([optGenVals[-1]['postprocess.fuzzyPOS'][i] for i in range(len(optGenVals[-1][majorOpt1[0]])) if tuple([int(optGenVals[-1][key][i]) for key in majorOpt1]) == p])
	pFOSs_1.append(np.average([optGenVals[-1]['postprocess.fuzzyPOS'][i] for i in range(len(optGenVals[-1][majorOpt1[0]])) if tuple([int(optGenVals[-1][key][i]) for key in majorOpt1]) == p]))


majorOpt2 = ["compatibility.option1", "compatibility.option4", "compatibility.option8"]
print "Major Functional Group 2:",
for m in majorOpt2: print ASPECT_list[optionVals.index(m)],
print ""
ptoOpts_2 = [tuple([int(optGenVals[-1][key][i]) for key in majorOpt2]) for i in range(len(optGenVals[-1][majorOpt2[0]])) if optGenVals[-1]['compatibility.compatibility'][i] == 0]
ptoOpts_2set = list(set(ptoOpts_2))
#ptoOpts_2set.sort(key=lambda x: x[3])
ptoOpts_2set.sort(key=lambda x: x[2])
ptoOpts_2set.sort(key=lambda x: x[1])
ptoOpts_2set.sort(key=lambda x: x[0])
print 'From', len(ptoOpts_2), 'total -', len(ptoOpts_2set), 'combinations:'
pFOSs_2 = []
for p in ptoOpts_2set:
	print p,
	print 'Phi_FPoS: %.4f' % np.average([optGenVals[-1]['postprocess.response_1_POS'][i] for i in range(len(optGenVals[-1][majorOpt2[0]])) if tuple([int(optGenVals[-1][key][i]) for key in majorOpt2]) == p]),
	print 'FoM_FPoS: %.4f' % np.average([optGenVals[-1]['postprocess.response_2_POS'][i] for i in range(len(optGenVals[-1][majorOpt2[0]])) if tuple([int(optGenVals[-1][key][i]) for key in majorOpt2]) == p]),
	print 'L/D_FPoS: %.4f' % np.average([optGenVals[-1]['postprocess.response_3_POS'][i] for i in range(len(optGenVals[-1][majorOpt2[0]])) if tuple([int(optGenVals[-1][key][i]) for key in majorOpt2]) == p]),
	print 'etP_FPoS: %.4f' % np.average([optGenVals[-1]['postprocess.response_4_POS'][i] for i in range(len(optGenVals[-1][majorOpt2[0]])) if tuple([int(optGenVals[-1][key][i]) for key in majorOpt2]) == p]),
	print 'Pin_FPoS: %.4f' % np.average([optGenVals[-1]['postprocess.response_6_POS'][i] for i in range(len(optGenVals[-1][majorOpt2[0]])) if tuple([int(optGenVals[-1][key][i]) for key in majorOpt2]) == p]),
	print 'FPos: %.4f' % np.average([optGenVals[-1]['postprocess.fuzzyPOS'][i] for i in range(len(optGenVals[-1][majorOpt2[0]])) if tuple([int(optGenVals[-1][key][i]) for key in majorOpt2]) == p])
	pFOSs_2.append(np.average([optGenVals[-1]['postprocess.fuzzyPOS'][i] for i in range(len(optGenVals[-1][majorOpt2[0]])) if tuple([int(optGenVals[-1][key][i]) for key in majorOpt2]) == p]))
	
	
	
### ANALYSE PARETO RANGES:

for p in pareto_outputs:
	print pOut_names[p], '  Min:', min(optGenVals[-1][p]),
	print 				 '  Max:', max(optGenVals[-1][p])

### Values from crowding distance optimizations
avgsPouts_c = {'postprocess.response_3': [0.35214998062466191, 0.62996362688681118, 1.0118679509498578, 2.200523092140346, 5.6482306557281685, 10.41021541091972, 11.40138518199579, 11.679255007041943, 12.008106136461764, 12.294770300547487, 12.209957008467134, 12.170433620582383, 12.206190100397054, 12.327755119299241, 12.288747001542042, 12.238895126491814, 12.193816155417007, 12.564482618709699, 12.580561234990778, 12.551141917636578, 12.526032980364709, 12.242504664640022, 12.234211238829424, 12.141736810737195, 12.141758593078325, 12.132727995525032, 12.185079762485664, 12.271492153556759, 12.380843350173752, 12.308467347032527, 12.278436006843963, 12.284524416542572, 12.238938046921609, 12.502182215752704, 12.613116460968399, 12.520866190728185, 12.60443346653866, 12.701406378145139, 12.60678357047542, 12.534940678813379, 11.937588268300585, 11.744524599552879, 11.886442783006499, 11.808879791358825, 11.863286015163458, 11.783579315176945, 11.739994809243711, 11.657402621355574, 11.726079818690632, 11.71205364787742], 'postprocess.response_2': [0.018433021652708853, 0.033149489627327888, 0.051565780744704616, 0.11232367426258173, 0.28730142305677359, 0.50469518162238214, 0.50858255119751317, 0.51425989222457991, 0.51798180438649388, 0.51630682147170415, 0.5218788888819631, 0.51820155009477553, 0.52557287749560455, 0.53114682034076621, 0.54215315529909425, 0.55129688516129927, 0.56785943339978284, 0.55133280163420206, 0.55681496034742606, 0.54767903315087851, 0.55326687640927363, 0.5404590517496205, 0.54425339589177346, 0.5554416885932234, 0.56482738351504669, 0.5668218997475778, 0.57613402318378937, 0.56313866655208422, 0.56873333490154054, 0.57440345376083557, 0.57819407127410616, 0.58382730629848612, 0.56160696038747049, 0.54842416057839716, 0.5502724219120263, 0.55401516805501116, 0.55212236849237173, 0.55213966031076311, 0.55592569275108572, 0.55784031222940067, 0.57653206135478618, 0.59338136304186306, 0.60269870840255024, 0.61201338581919551, 0.60814611793277362, 0.61364098075151874, 0.6117505854766434, 0.62497481705987978, 0.62486408850350728, 0.63051137734411133], 'postprocess.response_1': [0.17528781344147126, 0.30283793520824437, 0.47605282041258401, 1.0052078133385176, 2.5642440068567338, 4.7338828972492069, 5.0471881666432488, 5.062795150308574, 5.1676164921450791, 5.3513699028706103, 5.2745222927110937, 5.3984459580693187, 5.3186606801976568, 5.2825477138929555, 5.2662138013989788, 5.2402160188281721, 5.1047104507749683, 5.1617674030458796, 5.1526770289505022, 5.2470061694636057, 5.2148264463358016, 5.507115369560097, 5.4980949737894802, 5.4238216290661061, 5.3646630659440921, 5.3572396546593257, 5.3160012031275716, 5.38686627984079, 5.3231291530201732, 5.3066334670908573, 5.2738383714810091, 5.253794793105655, 5.3273231292684313, 5.416815101148738, 5.3391990747209901, 5.3771868015862667, 5.3861886825513974, 5.3763545729451376, 5.3600780277846756, 5.3493731147960766, 5.671633457555104, 5.6996731507158414, 5.6194418054747244, 5.5596459893508685, 5.6003108158978714, 5.6181156195150042, 5.6452034689051516, 5.5332360044399218, 5.5472867829732149, 5.49333760888151], 'postprocess.response_6': [-7625.8889883030033, -6998.6459520639601, -7034.4407176228333, -6966.9601813088175, -6881.7527995512592, -7101.5714956629809, -7169.2287137448975, -7072.1643081507282, -6818.1389014787219, -6965.9668028822944, -6874.0769883925277, -6988.1905249573265, -6864.0005641673115, -6795.025279356988, -6520.1607728935278, -6396.3244687031693, -6152.2861400750617, -6341.357937771565, -6236.752120574055, -6294.1036072675324, -6204.6616672435193, -6110.4746165559673, -6027.3096725488977, -5875.0624301414118, -5764.6501812688475, -5693.6755638891109, -5635.7504510322278, -5832.0162222835852, -5795.0231076944137, -5721.3377705208713, -5694.2883464447741, -5649.6796399915402, -5908.0547470461697, -6060.6411991825207, -6072.6740974767699, -5999.136088859047, -6018.9418881659576, -6012.1579436703469, -5971.6437038483373, -5966.8771656882827, -5600.0892311123007, -5402.9010591257866, -5317.1446452819828, -5184.6695163289669, -5183.8300267615541, -5135.6897000156205, -5159.5236181592636, -5011.890588690334, -5015.9059725998777, -4910.0896886735864], 'postprocess.response_4': [0.01969168604139971, 0.03566962108170392, 0.055552621498710056, 0.11949616659280553, 0.30360955700089259, 0.53814522270476894, 0.53906797089883585, 0.54193944747745171, 0.5436219105567468, 0.54321995448151361, 0.54503958598175006, 0.54427864927505532, 0.5469102081405971, 0.5487423172496918, 0.5525097386065686, 0.5559556121585586, 0.56225408881169847, 0.55599543230627579, 0.55736450439381124, 0.55433098945303616, 0.55683708953158295, 0.55199799031195429, 0.55360936743370681, 0.55834510584535435, 0.56205022443443875, 0.56327451041095888, 0.56799095704137803, 0.56278298011465844, 0.56668068520740222, 0.56896338927199019, 0.57184533947217175, 0.5756751139034274, 0.56588419989091421, 0.55706833125616328, 0.5586299187617737, 0.56051544139341392, 0.5616051026322183, 0.56281009682751004, 0.56429809023514432, 0.56511001760044954, 0.57374022053228768, 0.58348573680997418, 0.58854422406897722, 0.5948584194764085, 0.59412247353022229, 0.59715722505625812, 0.59574397648248223, 0.60287691342758909, 0.60220766155763028, 0.6049855198249221]}
maxsPouts_c = {'postprocess.response_3': [11.417104670656572, 11.417104670656572, 14.225687959352948, 14.225687959352948, 14.334011732270817, 15.01512988313122, 15.01512988313122, 15.01512988313122, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667, 15.087852112011667], 'postprocess.response_2': [0.49880573970243713, 0.49880573970243713, 0.49880573970243713, 0.7469006324455525, 0.7469176168982823, 0.7469176168982823, 0.7469176168982823, 0.7469176168982823, 0.7469176168982823, 0.7469176168982823, 0.7469176168982823, 0.7471207625801441, 0.7471207625801441, 0.7471207625801441, 0.7471207625801441, 0.7471207625801441, 0.7471207625801441, 0.7515680273771819, 0.7515680273771819, 0.7515680273771819, 0.7515680273771819, 0.7515680273771819, 0.7515680273771819, 0.7515680273771819, 0.7515680273771819, 0.7515680273771819, 0.7515680273771819, 0.7515680273771819, 0.7515680273771819, 0.7515680273771819, 0.7515680273771819, 0.7515680273771819, 0.7515680273771819, 0.7515680273771819, 0.7515680273771819, 0.7515680273771819, 0.7535861515175137, 0.7535861515175137, 0.7535861515175137, 0.7535861515175137, 0.7535861515175137, 0.7535861515175137, 0.7535861515175137, 0.7535861515175137, 0.7535861515175137, 0.7535861515175137, 0.7535861515175137, 0.7535861515175137, 0.7535861515175137, 0.7535861515175137], 'postprocess.response_1': [6.23790596972379, 6.23790596972379, 6.576646283905103, 6.576646283905103, 6.576646283905103, 6.576646283905103, 6.576646283905103, 6.785194504941533, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129, 7.178667401677129], 'postprocess.response_6': [-5470.4430574638955, -5408.241951837381, -5408.241951837381, -3626.744679932128, -3626.744679932128, -3626.744679932128, -3626.744679932128, -3626.744679932128, -3296.329041141038, -3296.329041141038, -3296.329041141038, -3296.329041141038, -3283.284348638654, -3283.284348638654, -3283.284348638654, -3283.284348638654, -3283.284348638654, -3122.9009421272513, -3122.9009421272513, -3122.9009421272513, -3122.9009421272513, -3122.9009421272513, -3122.9009421272513, -2888.892327882344, -2888.892327882344, -2888.892327882344, -2888.892327882344, -2886.1075436433, -2886.1075436433, -2886.1075436433, -2886.1075436433, -2886.1075436433, -2886.1075436433, -2886.1075436433, -2886.1075436433, -2886.1075436433, -2886.1075436433, -2886.1075436433, -2886.1075436433, -2886.1075436433, -2886.1075436433, -2424.006550475422, -2424.006550475422, -2424.006550475422, -2424.006550475422, -2424.006550475422, -2424.006550475422, -2424.006550475422, -2424.006550475422, -2424.006550475422], 'postprocess.response_4': [0.5438406272607205, 0.5438406272607205, 0.5438406272607205, 0.6072753367181225, 0.6072753367181225, 0.6072753367181225, 0.6351095429751217, 0.6351095429751217, 0.6351095429751217, 0.6351095429751217, 0.6351095429751217, 0.6351095429751217, 0.6351095429751217, 0.6351095429751217, 0.6351095429751217, 0.6351095429751217, 0.6351095429751217, 0.6351095429751217, 0.6351095429751217, 0.6351095429751217, 0.6351095429751217, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549, 0.7254585454195549]}

optPctP0_c = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014814814814814815, 0.022222222222222223, 0.044444444444444446, 0.044444444444444446, 0.06666666666666667, 0.1037037037037037, 0.11851851851851852, 0.1259259259259259, 0.14074074074074075, 0.13333333333333333, 0.14074074074074075, 0.14074074074074075, 0.14074074074074075, 0.1259259259259259, 0.18518518518518517, 0.17037037037037037, 0.14814814814814814, 0.14814814814814814, 0.15555555555555556, 0.14074074074074075, 0.14814814814814814, 0.14074074074074075, 0.14074074074074075, 0.13333333333333333, 0.14814814814814814, 0.1925925925925926, 0.2, 0.18518518518518517, 0.1925925925925926, 0.2, 0.1925925925925926, 0.18518518518518517, 0.18518518518518517, 0.2740740740740741, 0.3333333333333333, 0.34074074074074073, 0.34814814814814815, 0.34814814814814815, 0.37037037037037035, 0.37037037037037035, 0.362962962962963, 0.3851851851851852, 0.37777777777777777]
optPctP1_c = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007407407407407408, 0.037037037037037035, 0.06666666666666667, 0.05925925925925926, 0.044444444444444446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007407407407407408, 0.007407407407407408, 0.007407407407407408, 0.007407407407407408, 0.014814814814814815, 0.037037037037037035, 0.014814814814814815, 0.022222222222222223, 0.02962962962962963, 0.02962962962962963, 0.02962962962962963, 0.0, 0.007407407407407408, 0.007407407407407408, 0.007407407407407408, 0.014814814814814815, 0.014814814814814815, 0.014814814814814815, 0.014814814814814815, 0.022222222222222223, 0.014814814814814815, 0.014814814814814815, 0.014814814814814815, 0.014814814814814815, 0.022222222222222223, 0.022222222222222223, 0.022222222222222223, 0.022222222222222223, 0.037037037037037035]

avgsPouts_c_POC = {'postprocess.response_4_POS': [0.29499980133332782, 0.2244790424999929, 0.22053753827956118, 0.23835670957745547, 0.21950609925924922, 0.25051840079011484, 0.31567882113579554, 0.39045650325925502, 0.37038245881480941, 0.41586389604937818, 0.4027528070123404, 0.41965401930863766, 0.47850579022222034, 0.51867857822222185, 0.56483902054321078, 0.56603655140740827, 0.54693780804938308, 0.58274023303703859, 0.59267848992592798, 0.59704885293827392, 0.60938217155555818, 0.63165374706173205, 0.76654248143210613, 0.9661718757037171, 0.99333234000001391, 0.99333234000001391, 0.99333234000001391, 0.99333234000001391, 0.99333234000001391, 0.99333234000001391, 0.99333234000001391, 0.99333234000001391, 0.99333234000001391, 0.99333234000001391, 0.99333234000001391, 0.99333234000001391, 0.99333234000001391, 0.99333234000001391, 0.99333234000001391, 0.99333234000001391, 0.99333234000001391, 0.99333234000001391, 0.99323357466668039, 0.99323357466668039, 0.99313480933334697, 0.99313480933334697, 0.99313480933334697, 0.99313480933334697, 0.99313480933334697, 0.99313480933334697], 'postprocess.response_6_POS': [0.0010236573023036839, 0.0084377007825894718, 0.015856380152105196, 0.04547639473507626, 0.067762128174662054, 0.10590368644526203, 0.17050303678791112, 0.26456143861423637, 0.22034798403072534, 0.25871740147787858, 0.23015466695371284, 0.27041008496464136, 0.35796161968752549, 0.40922864722145541, 0.45949665749658164, 0.46493644329404116, 0.44112667489503071, 0.4900820024855172, 0.50208066661074946, 0.50415238935508533, 0.51772963645466918, 0.53132232015302183, 0.67035297550630801, 0.89738008098058331, 0.93407579531755291, 0.93651316602883139, 0.94399961448555358, 0.93645790019539243, 0.92923926522624223, 0.92536551847717119, 0.91557165371680937, 0.91131430405479696, 0.93259925600761651, 0.93988821536680689, 0.93051190488827584, 0.92451906812985751, 0.91956067203467662, 0.9238567006042564, 0.91906405807917846, 0.92713892182295887, 0.93302262590214113, 0.93249459534739931, 0.9302457325126966, 0.93000069952115472, 0.92979129631132074, 0.92876970855173835, 0.9301135336312587, 0.93018889145484673, 0.92996010914895977, 0.93452288844414655], 'postprocess.response_1_POS': [0.14887308043235015, 0.076555941488563442, 0.056565709284887418, 0.043360316075647977, 0.04998449868580996, 0.07788471097411763, 0.10710247812961106, 0.12400759739799912, 0.13846164103704495, 0.12889856300597335, 0.12779335686411231, 0.15433545305997817, 0.19656855203694346, 0.23105894312957653, 0.22812641113094992, 0.23359742180561521, 0.24047516494868779, 0.23675826740810824, 0.24033304485070114, 0.24629121489147762, 0.2469433262178107, 0.25155792563766699, 0.19916902478652457, 0.11930706772979992, 0.098485897408234477, 0.097908927638499677, 0.10081552521839733, 0.11033540326751973, 0.12243042599253547, 0.12791671374082503, 0.14202041090485223, 0.1525698089596044, 0.134139635689728, 0.137152400487043, 0.15664286553071069, 0.17386136836833188, 0.18244285663780604, 0.18382175806544543, 0.19744044996446844, 0.21056757895459696, 0.219928126272839, 0.21739410173228027, 0.21727159311159305, 0.21904820539647515, 0.22494978297416204, 0.18782574442755801, 0.19672455470866576, 0.18614060247470052, 0.18614060247470052, 0.1871186300087655], 'postprocess.response_2_POS': [0.19994058229292733, 0.12496212514401284, 0.096749020601808122, 0.09856309687264006, 0.074046666499015326, 0.11847307669040488, 0.19251646155979849, 0.28877494103612145, 0.25915241758408941, 0.30358573058028215, 0.28138041465324298, 0.30360173141433444, 0.38506145457106833, 0.43689893601979246, 0.48873607718528905, 0.48873766172030469, 0.46652398187348215, 0.5109550253905093, 0.52575729378848446, 0.53315927944466079, 0.54796797093672855, 0.57757929768075567, 0.73307938284453622, 0.97003091004569109, 0.9996676464914096, 0.99967635813416234, 0.99967456240377983, 0.99967835920305637, 0.99966952272689413, 0.99966379255217375, 0.99965949139302923, 0.99965504644864001, 0.99964576544533046, 0.99963863100260908, 0.99963377857343261, 0.99962274001389029, 0.9996145280966946, 0.99961534863149637, 0.99960843704482161, 0.99960226564061971, 0.99959875265002907, 0.99959814450020745, 0.99960881044743011, 0.99960400066581012, 0.99960534019646352, 0.9996057331924072, 0.9996035302261852, 0.99959567670049032, 0.99959567670049032, 0.99959275069362818], 'postprocess.response_3_POS': [0.67694377801562089, 0.82092913687010616, 0.83438048008970722, 0.79645968648889942, 0.84961538300901929, 0.92048649218226086, 0.87965435460409225, 0.86863850227330552, 0.88356843906777438, 0.84824741098587608, 0.83360642283131692, 0.82593772680224276, 0.76065820174999677, 0.72286965742006659, 0.67875068847094588, 0.67304304196377052, 0.70266754203552961, 0.67879201622812246, 0.68461274967997399, 0.70225585263240453, 0.71389731953610791, 0.73148891791041337, 0.71285715853923259, 0.65271631483275017, 0.62342544128957922, 0.6351698016089079, 0.65303362193321324, 0.68270812195497244, 0.73580664360601378, 0.76543114367777298, 0.84222278391122141, 0.89537593513726266, 0.88886214682291032, 0.88308446888355885, 0.92440911635589618, 0.93627373118459967, 0.94228231167082643, 0.94221599229270137, 0.95411757467703007, 0.95416264407640528, 0.96007874780325686, 0.96009587741575697, 0.96011265980638172, 0.96025969669638145, 0.96030985868325669, 0.95428148655015566, 0.95444421786890588, 0.95454310665890663, 0.95458731957765675, 0.96045481224200857]}
maxsPouts_c_POC = {'postprocess.response_4_POS': [0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141, 0.9933323400000141], 'postprocess.response_6_POS': [0.13803734703306186, 0.9986390787841657, 0.9988402199635585, 0.9990956086821472, 0.9990956086821472, 0.9990956086821472, 0.9990956086821472, 0.9990956086821472, 0.9990956086821472, 0.9990956086821472, 0.9990956086821472, 0.9990956086821472, 0.9990956086821472, 0.9990956086821472, 0.9990956086821472, 0.9990956086821472, 0.9990956086821472, 0.9990956086821472, 0.9990956086821472, 0.9990956086821472, 0.9992587705563163, 0.9992587705563163, 0.9992587705563163, 0.999791374159047, 0.999813845916954, 0.999813845916954, 0.999813845916954, 0.999813845916954, 0.999813845916954, 0.999813845916954, 0.999813845916954, 0.999813845916954, 0.999813845916954, 0.9998298774182184, 0.9998298774182184, 0.9998298774182184, 0.9998298774182184, 0.9998298774182184, 0.9998298774182184, 0.9998298774182184, 0.9998298774182184, 0.9998298774182184, 0.9998298774182184, 0.9998298774182184, 0.9998298774182184, 0.9998298774182184, 0.9998298774182184, 0.9998298774182184, 0.9998298774182184, 0.9998298774182184], 'postprocess.response_1_POS': [0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.6938215382258733, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986, 0.7551292477357986], 'postprocess.response_2_POS': [0.9996998755844213, 0.9996998755844213, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704, 0.9998150212555704], 'postprocess.response_3_POS': [0.9959365040624969, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958, 0.9999989999999958]}

optPctP0_POS_c = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014814814814814815, 0.014814814814814815, 0.014814814814814815, 0.022222222222222223, 0.022222222222222223, 0.022222222222222223, 0.02962962962962963, 0.02962962962962963, 0.037037037037037035, 0.037037037037037035, 0.044444444444444446, 0.044444444444444446, 0.022222222222222223, 0.022222222222222223, 0.02962962962962963, 0.022222222222222223, 0.02962962962962963, 0.037037037037037035, 0.044444444444444446, 0.05185185185185185, 0.05185185185185185, 0.05185185185185185, 0.05925925925925926, 0.05925925925925926, 0.05925925925925926, 0.05185185185185185, 0.05185185185185185, 0.044444444444444446, 0.044444444444444446, 0.044444444444444446]
optPctP1_POS_c = [0.007407407407407408, 0.007407407407407408, 0.014814814814814815, 0.014814814814814815, 0.014814814814814815, 0.014814814814814815, 0.014814814814814815, 0.014814814814814815, 0.014814814814814815, 0.014814814814814815, 0.014814814814814815, 0.014814814814814815, 0.014814814814814815, 0.022222222222222223, 0.022222222222222223, 0.022222222222222223, 0.022222222222222223, 0.022222222222222223, 0.022222222222222223, 0.022222222222222223, 0.022222222222222223, 0.02962962962962963, 0.02962962962962963, 0.044444444444444446, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.05185185185185185, 0.05185185185185185, 0.05925925925925926, 0.06666666666666667, 0.08888888888888889, 0.08148148148148149, 0.1037037037037037, 0.1259259259259259, 0.13333333333333333, 0.14074074074074075, 0.15555555555555556, 0.15555555555555556, 0.17037037037037037, 0.16296296296296298, 0.16296296296296298, 0.17037037037037037, 0.17777777777777778, 0.13333333333333333, 0.14074074074074075, 0.11851851851851852, 0.11851851851851852, 0.11851851851851852]

###

#Plot Pareto Frontiers
if False:
	P0_opts = [] #option lists for points on pareto frontier 0
	for i in i_P0: P0_opts.append([int(dataVals[key][i]) for key in optionVals if dataVals['compatibility.compatibility'][i] == 0])
	P1_opts = [] #option lists for points on pareto frontier 1
	for i in i_P1: P1_opts.append([int(dataVals[key][i]) for key in optionVals])
	P0_POS_opts = [] #option lists for points on POS pareto frontier 0
	for i in i_P0_POS: P0_POS_opts.append([int(dataVals[key][i]) for key in optionVals])
	P1_POS_opts = [] #option lists for points on POS pareto frontier 1
	for i in i_P1_POS: P1_POS_opts.append([int(dataVals[key][i]) for key in optionVals])
	
	optPctP0 = [] 
	optPctP1 = []
	optPctP0_POS = [] 
	optPctP1_POS = []
	
	avgsPouts = {p:[] for p in pareto_outputs} #get average value for pareto outputs at each generation
	avgsPOSs = {p:[] for p in pareto_outputs_POS} #get average value for pareto POSs at each generation
	maxsPouts = {p:[] for p in pareto_outputs} #get average value for pareto outputs at each generation
	maxsPOSs = {p:[] for p in pareto_outputs_POS} #get average value for pareto POSs at each generation
	
	for oGV in optGenVals:
		genOpts = [[int(oGV[key][i]) for key in optionVals] for i in range(len(oGV[optionVals[0]]))]
		optPctP0.append(min(1.0, sum([1.0 for gO in genOpts if gO in P0_opts])/float( len(optGenVals[-1]['compatibility.compatibility']))))
		optPctP1.append(min(1.0, sum([1.0 for gO in genOpts if gO in P1_opts])/float(len(optGenVals[-1]['compatibility.compatibility']))))
		optPctP0_POS.append(min(1.0,sum([1.0 for gO in genOpts if gO in P0_POS_opts])/float(len(optGenVals[-1]['compatibility.compatibility']))))
		optPctP1_POS.append(min(1.0, sum([1.0 for gO in genOpts if gO in P1_POS_opts])/float(len(optGenVals[-1]['compatibility.compatibility']))))
		for p in pareto_outputs: avgsPouts[p].append(np.average([x for x in oGV[p] if x <> -99999.0]))
		for p in pareto_outputs_POS: avgsPOSs[p].append(np.average([x for x in oGV[p] if x > -1]))
		for p in pareto_outputs: maxsPouts[p].append(max([x for x in oGV[p] if x <> -99999.0]))
		for p in pareto_outputs_POS: maxsPOSs[p].append(max([x for x in oGV[p] if x > -1]))
	#print 'avgsPouts_c =', avgsPouts
	#print 'maxsPouts_c =', maxsPouts
	#print 'avgsPouts_c_POC =', avgsPOSs
	#print 'maxsPouts_c_POC =', maxsPOSs
	#print 'optPctP0_c =', optPctP0
	#print 'optPctP1_c =', optPctP1
	#print 'optPctP0_POS_c =', optPctP0_POS
	#print 'optPctP1_POS_c =', optPctP1_POS
	
	#plot progress of finding pareto frontier
	if False:
		plt.figure(figsize=(10,5))
		plt.title("Percent of Pareto Frontier(s) Found During Optimization", y=1.03)
		plt.plot(range(len(optPctP0_c)), optPctP0_c, '-r')
		plt.plot(range(len(optPctP1_c)), optPctP1_c, '--r')
		plt.plot(range(len(optPctP0)), optPctP0, '-b')
		plt.plot(range(len(optPctP1)), optPctP1, '--b')
		plt.xlabel('Generation')
		plt.ylabel('% Population in Pareto Frontier')
		#plt.legend(['First Frontier', 'Second Frontier'])
		plt.legend(['Pareto Frontier (CD)', 'P-1 Frontier (CD)', 'Pareto Frontier (HD)', 'P-1 Frontier (HD)'], 
					bbox_to_anchor=(0.65,1.06), ncol=2, fontsize=10)
	
	#plot progress of finding POS pareto frontier
	if True:
		plt.figure(figsize=(10,5))
		#plt.title("Percent of POS Pareto Frontier(s) Found During Optimization", y=1.03)
		plt.plot(range(len(optPctP0_POS_c)), optPctP0_POS_c, '-r', clip_on=False)
		plt.plot(range(len(optPctP1_POS_c)), optPctP1_POS_c, '--r', clip_on=False)
		plt.plot(range(len(optPctP0_POS)), optPctP0_POS, '-b', clip_on=False)
		plt.plot(range(len(optPctP1_POS)), optPctP1_POS, '--b', clip_on=False)
		plt.xlabel('Generation')
		plt.ylabel('% Population in Pareto Frontier')
		#plt.legend(['First Frontier', 'Second Frontier'])
		plt.legend(['Pareto Frontier (CD)', 'P-1 Frontier (CD)', 'Pareto Frontier (HD)', 'P-1 Frontier (HD)'], 
					bbox_to_anchor=(0.65,1.06), ncol=2, fontsize=10)	
	
	#OBJECTIVE (CENTROID) LINE CHARTS
	if False:
		plt.figure()
		plt.title("Optimization Progress for Objectives", y=1.07)
		i=1
		
		for p in avgsPouts: 
			ax = plt.subplot(len(avgsPouts), 1, i)
			ax.locator_params(axis='y',nbins=5)
			ax.plot(range(len(avgsPouts_c[p])), [abs(x) for x in avgsPouts_c[p]], '-r', lw=1.5)
			ax.plot(range(len(maxsPouts_c[p])), [abs(x) for x in maxsPouts_c[p]], '--r', lw=1.5)
			ax.plot(range(len(avgsPouts[p])), [abs(x) for x in avgsPouts[p]], '-b', lw=1.5)
			ax.plot(range(len(maxsPouts[p])), [abs(x) for x in maxsPouts[p]], '--b', lw=1.5)
			if i == len(avgsPouts):
				ax.set_xlabel('Generations')
			else: ax.set_xticklabels([])
			ax.xaxis.grid(True)
			yl = ax.set_ylabel(pOut_names[p], fontsize=11)#, rotation=0)
			#yl.set_rotation(0)
			#if i == 1: ax.legend(['Average', 'Maximum'], loc=4, ncol=2, fontsize=10)
			if i == 1: ax.legend(['Average (CD)', 'Best (CD)', 'Average (HD)', 'Best (HD)'], loc=4, ncol=2, fontsize=10)
			i = i+1
		plt.subplots_adjust(left=0.11)
		
	#OBJECTIVE (POS) LINE CHARTS
	if True:
		plt.figure()
		plt.title("Optimization Progress for POS Objectives", y=1.07)
		plt.locator_params(nbins=5)
		i=1
		for p in avgsPOSs: 
			ax = plt.subplot(len(avgsPOSs), 1, i)
			ax.locator_params(axis='y',nbins=3)
			ax.plot(range(len(avgsPOSs[p])), avgsPOSs[p], '-r', lw=1.5)
			ax.plot(range(len(maxsPOSs[p])), maxsPOSs[p], '--r', lw=1.5)
			ax.plot(range(len(avgsPouts_c_POC[p])), avgsPouts_c_POC[p], '-b', lw=1.5)
			ax.plot(range(len(maxsPouts_c_POC[p])), maxsPouts_c_POC[p], '--b', lw=1.5)
			if i == len(avgsPOSs):
				ax.set_xlabel('Generations')
			else: ax.set_xticklabels([])
			ax.xaxis.grid(True)
			ax.set_ylim([0.0,1.02])
			yl = ax.set_ylabel(pOutPOS_names[p]+' FPoS', fontsize=10)#, rotation=0)
			#yl.set_rotation(0)
			#if i == 1: ax.legend(['Average', 'Maximum'], loc=4, fontsize=10)
			if i == 1: ax.legend(['Average (CD)', 'Maximum (CD)', 'Average (HD)', 'Maximum (HD)'], loc=4, ncol=2, fontsize=9)
			i = i+1
		plt.subplots_adjust(left=0.11)
			
#Compare with all results (FPOS):
if False:
	fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12,8))
	#PHI vs. FoM
	axes[0,0].scatter(dataVals["postprocess.response_1_POS"], dataVals["postprocess.response_2_POS"], 4, c='lightblue', lw=0.0, alpha=0.1)
	axes[0,0].scatter([dataVals["postprocess.response_1_POS"][i] for i in i_P0_POS+i_P1_POS], [dataVals["postprocess.response_2_POS"][i] for i in i_P0_POS+i_P1_POS], 15, c='gold', marker='*', lw=0.0)
	axes[0,0].scatter(optGenVals[-1]["postprocess.response_1_POS"], optGenVals[-1]["postprocess.response_2_POS"], 10, c='blue', lw=0.0, alpha=0.8)
	axes[0,0].set_xlabel('Empty Weight Ratio - $\phi$')
	axes[0,0].set_ylabel('System Figure of Merit')
	axes[0,0].set_xlim([0.0,1.02])
	axes[0,0].set_ylim([0.0,1.02])

	axes[0,1].scatter(dataVals["postprocess.response_3_POS"], dataVals["postprocess.response_1_POS"], 4, c='lightblue', lw=0.0, alpha=0.1)
	axes[0,1].scatter([dataVals["postprocess.response_3_POS"][i] for i in i_P0_POS+i_P1_POS], [dataVals["postprocess.response_1_POS"][i] for i in i_P0_POS+i_P1_POS], 15, c='gold', marker='*', lw=0.0)
	axes[0,1].scatter(optGenVals[-1]["postprocess.response_3_POS"], optGenVals[-1]["postprocess.response_1_POS"], 10, c='blue', lw=0.0, alpha=0.8)
	axes[0,1].set_xlabel('System Lift/Drag')
	axes[0,1].set_ylabel('Empty Weight Ratio - $\phi$')
	axes[0,0].set_xlim([0.0,1.02])
	axes[0,0].set_ylim([0.0,1.02])

	axes[1,0].scatter(dataVals["postprocess.response_4_POS"], dataVals["postprocess.response_6_POS"], 4, c='lightblue', lw=0.0, alpha=0.1)
	axes[1,0].scatter([dataVals["postprocess.response_4_POS"][i] for i in i_P0_POS+i_P1_POS], [dataVals["postprocess.response_6_POS"][i] for i in i_P0_POS+i_P1_POS], 15, c='gold', marker='*', lw=0.0)
	axes[1,0].scatter(optGenVals[-1]["postprocess.response_4_POS"], optGenVals[-1]["postprocess.response_6_POS"], 10, c='blue', lw=0.0, alpha=0.8)
	axes[1,0].set_xlabel('System Propulsive Efficiency - $\eta_P$')
	axes[1,0].set_ylabel('Installed Power (shp)')
	axes[0,0].set_xlim([0.0,1.02])
	axes[0,0].set_ylim([0.0,1.02])

	axes[1,1].scatter(dataVals["postprocess.response_5_POS"], dataVals["postprocess.response_7_POS"], 4, c='lightblue', lw=0.0, alpha=0.1)
	axes[1,1].scatter([dataVals["postprocess.response_5_POS"][i] for i in i_P0_POS+i_P1_POS], [dataVals["postprocess.response_7_POS"][i] for i in i_P0_POS+i_P1_POS], 15, c='gold', marker='*', lw=0.0)
	axes[1,1].scatter(optGenVals[-1]["postprocess.response_5_POS"], optGenVals[-1]["postprocess.response_7_POS"], 10, c='blue', lw=0.0, alpha=0.8)
	axes[1,1].set_xlabel('Design Gross Weight (lbs)')
	axes[1,1].set_ylabel('Maximum Airspeed - $V_H$ (kts)')
	axes[0,0].set_xlim([0.0,1.02])
	axes[0,0].set_ylim([0.0,1.02])


#Show Optimized PF:
if False:
	fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12,8))
	pcs = [plt.get_cmap('jet')(float(i)/len(optGenVals[-1]["postprocess.response_1_POS"])) for i in range(len(optGenVals[-1]["postprocess.response_1_POS"]))]
	
	#PHI vs. FoM
	axes[0,0].scatter(optGenVals[-1]["postprocess.response_1"], optGenVals[-1]["postprocess.response_2"], 10, c=pcs, lw=0.0, alpha=0.8)
	axes[0,0].set_xlabel('Empty Weight Ratio - $\phi$')
	axes[0,0].set_ylabel('System Figure of Merit')

	axes[0,1].scatter(optGenVals[-1]["postprocess.response_3"], optGenVals[-1]["postprocess.response_1"], 10, c=pcs, lw=0.0, alpha=0.8)
	axes[0,1].set_xlabel('System Lift/Drag')
	axes[0,1].set_ylabel('Empty Weight Ratio - $\phi$')

	axes[1,0].scatter(optGenVals[-1]["postprocess.response_4"], optGenVals[-1]["postprocess.response_6"], 10, c=pcs, lw=0.0, alpha=0.8)
	axes[1,0].set_xlabel('System Propulsive Efficiency - $\eta_P$')
	axes[1,0].set_ylabel('Installed Power (shp)')

	axes[1,1].scatter(optGenVals[-1]["postprocess.response_5"], optGenVals[-1]["postprocess.response_7"], 10, c=pcs, lw=0.0, alpha=0.8)
	axes[1,1].set_xlabel('Design Gross Weight (lbs)')
	axes[1,1].set_ylabel('Maximum Airspeed - $V_H$ (kts)')
#with fpos
if False:
	fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12,8))
	pcs = [plt.get_cmap('jet')(float(i)/len(optGenVals[-1]["postprocess.response_1_POS"])) for i in range(len(optGenVals[-1]["postprocess.response_1_POS"]))]
	
	#PHI vs. FoM
	axes[0,0].scatter(optGenVals[-1]["postprocess.response_1_POS"], optGenVals[-1]["postprocess.response_2_POS"], 10, c=pcs, lw=0.0, alpha=0.8)
	axes[0,0].set_xlabel('Empty Weight Ratio - $\phi$')
	axes[0,0].set_ylabel('System Figure of Merit')
	axes[0,0].set_xlim([0.0,1.0])
	axes[0,0].set_ylim([0.0,1.0])

	axes[0,1].scatter(optGenVals[-1]["postprocess.response_3_POS"], optGenVals[-1]["postprocess.response_1_POS"], 10, c=pcs, lw=0.0, alpha=0.8)
	axes[0,1].set_xlabel('System Lift/Drag')
	axes[0,1].set_ylabel('Empty Weight Ratio - $\phi$')

	axes[1,0].scatter(optGenVals[-1]["postprocess.response_4_POS"], optGenVals[-1]["postprocess.response_6_POS"], 10, c=pcs, lw=0.0, alpha=0.8)
	axes[1,0].set_xlabel('System Propulsive Efficiency - $\eta_P$')
	axes[1,0].set_ylabel('Installed Power (shp)')

	axes[1,1].scatter(optGenVals[-1]["postprocess.response_5_POS"], optGenVals[-1]["postprocess.response_7_POS"], 10, c=pcs, lw=0.0, alpha=0.8)
	axes[1,1].set_xlabel('Design Gross Weight (lbs)')
	axes[1,1].set_ylabel('Maximum Airspeed - $V_H$ (kts)')
						

#SCATTER PLOT MATRIX:
if True:
	ptoOpts = [[int(optGenVals[-1][key][i]) for key in optionVals] for i in range(len(optGenVals[-1][optionVals[0]]))]
	fig, axes = plt.subplots(nrows=len(optionVals), ncols=len(optionVals), figsize=(8,8))
	for i in range(len(optionVals)):
		for j in range(len(optionVals)):
			axes[i,j].set_xlim([0.5,6.5])
			axes[i,j].set_xticks([1,2,3,4,5,6])
			axes[i,j].set_ylim([0.5,6.5])
			axes[i,j].set_yticks([1,2,3,4,5,6])
			if i == j: axes[i,j].text(1, 5.5, ASPECT_list[i], fontsize=8, rotation=45, weight='bold')
			else:
				#plt.grid(True)
				plt.sca(axes[i,j])
				plt.hist2d([x[j] for x in ptoOpts], [x[i] for x in ptoOpts], bins=np.array([0.5,1.5,2.5,3.5,4.5,5.5,6.5]), cmap='Reds')
				axes[i,j].set_xlim([0.5,6.5])
				axes[i,j].set_xticks([1,2,3,4,5,6])
				axes[i,j].set_ylim([0.5,6.5])
				axes[i,j].set_yticks([1,2,3,4,5,6])
			if j <> 0: axes[i,j].set_yticklabels([])
			if i < len(optionVals)-1: axes[i,j].set_xticklabels([])
			
	plt.subplots_adjust(left=0.04, bottom=0.04, right=0.96, top=0.94, wspace=0.08, hspace=0.08)
	
	plt.figure()
	plt.hist2d([x[j] for x in ptoOpts], [x[i] for x in ptoOpts], cmap='Reds')
	plt.colorbar()
	
#PARALLEL PLOT OF OPTIONS
if True:
	ptoOpts = [[int(optGenVals[-1][key][i]) for key in optionVals] for i in range(len(optGenVals[-1][optionVals[0]]))]	
	ptoPOSs = optGenVals[-1]['postprocess.fuzzyPOS']
	#colors = [plt.get_cmap('prism')(i/float(len(ptoOpts))) for i in range(len(ptoOpts))]
	#fig, axes = plt.subplots(1, len(optionVals)-1, sharey=False)
	#parallel_coordinates(fig, axes, ptoOpts, colors=colors, lws=None, style=None)
	plotOnMorph(ptoOpts+ptoOpts_c+[[4, 3, 1, 1, 1, 1, 4, 3, 4]], ptoPOSs+ptoFOSs_c+[0.708])
	
if True: #for pareto frontier of all options
	bestOpts = [[int(dataVals[key][i]) for key in optionVals] for i in i_P0_POS]
	bestPOSs = [dataVals['postprocess.fuzzyPOS'][i] for i in i_P0_POS]
	plotOnMorph(bestOpts, bestPOSs)
	
	print "BEST PARETO OPTIONS FOR WHOLE SPACE:"
	for i in range(len(bestOpts)):
		print "%d : %s : FPoS: %.3f " % (i, bestOpts[i], bestPOSs[i])
	
#HISTOGRAM OF OPTIONS ON PARETO FRONTIER
if False:
	bins = [1,2,3,4,5,6,7]
	counts = [np.histogram(optGenVals[-1][o], bins)[0] for o in optionVals]
	
	width=0.5
	fig, axes = plt.subplots(nrows=1, ncols=len(optionVals), figsize=(12,5))
	for i in range(len(axes)):
		axes[i].bar(bins[:-1], counts[i], color='r', width=width, align='center')
		axes[i].set_xlim([0.5,6.5])
		axes[i].set_xticklabels(range(OPTIONmax[i]+1))
		axes[i].set_ylim([0,max([max(x) for x in counts])])
		if i > 0: axes[i].set_yticklabels([])
		#axes[i].set_ylabel(ASPECT_list[i]+' Options', fontsize=10)
		axes[i].set_title(ASPECT_list[i], fontsize=10,)
	fig.subplots_adjust(left=0.05, right=0.95, wspace=0.15)

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#HISTOGRAMS OF FPoS
if False:
	linewidth=0.05
	plt.figure()
	plt.subplot(2,4,1)
	plt.hist([dataVals["postprocess.response_1_POS"], optGenVals[-1]["postprocess.response_1_POS"]], 
				bins=20, cumulative=-1, normed=True, lw=linewidth)
	plt.xlabel('fPoS - Empty Weight Ratio\n(Goal: 6.7)', fontsize=11)
	plt.xlim([0,1.0])
	plt.ylim([0,1.0])
	plt.ylabel('Cumulative Frequency (Norm.)', fontsize=11)
	plt.subplot(2,4,2)
	plt.hist([dataVals["postprocess.response_2_POS"], optGenVals[-1]["postprocess.response_2_POS"]], 
				bins=20, cumulative=-1, normed=True, lw=linewidth)
	plt.xlabel('fPoS - Figure of Merit\n(Goal: 0.775)', fontsize=11)
	plt.xlim([0,1.0])
	plt.ylim([0,1.0])
	plt.legend(['All Alternatives', 'Optimized Frontier'], ncol=2, bbox_to_anchor=(2.05, 1.25), fontsize=12)
	plt.subplot(2,4,3)
	plt.hist([dataVals["postprocess.response_3_POS"], optGenVals[-1]["postprocess.response_3_POS"]], 
				bins=20, cumulative=-1, normed=True, lw=linewidth)
	plt.xlabel('fPoS - Lift/Drag\n(Goal: 12.5)', fontsize=11)
	plt.xlim([0,1.0])
	plt.ylim([0,1.0])
	plt.subplot(2,4,4)
	plt.hist([dataVals["postprocess.response_4_POS"], optGenVals[-1]["postprocess.response_4_POS"]]
				, bins=20, cumulative=-1, normed=True, lw=linewidth)
	plt.xlabel('fPoS - Propulsive Eff.\n(Goal: 0.875)', fontsize=11)
	plt.xlim([0,1.0])
	plt.ylim([0,1.0])
	
	plt.subplot(2,4,5)
	plt.hist([dataVals["postprocess.response_5_POS"], optGenVals[-1]["postprocess.response_5_POS"]],
				bins=20, cumulative=-1, normed=True, lw=linewidth)
	plt.xlabel('fPoS - Gross Weight\n(Goal: 12000 lbs)', fontsize=11)
	plt.xlim([0,1.0])
	plt.ylim([0,1.0])
	plt.ylabel('Cumulative Frequency (Norm.)', fontsize=11)
	plt.subplot(2,4,6)
	plt.hist([dataVals["postprocess.response_6_POS"], optGenVals[-1]["postprocess.response_6_POS"]]
				, bins=20, cumulative=-1, normed=True, lw=linewidth)
	plt.xlabel('fPoS - Power Installed\n(Goal: 4500 hp)', fontsize=11)
	plt.xlim([0,1.0])
	plt.ylim([0,1.0])
	plt.subplot(2,4,7)
	plt.hist([dataVals["postprocess.response_7_POS"], optGenVals[-1]["postprocess.response_7_POS"]]
				, bins=20, cumulative=-1, normed=True, lw=linewidth)
	plt.xlabel('fPoS - Max Airspeed\n(Goal: 350 kts)', fontsize=11)
	plt.xlim([0,1.0])
	plt.ylim([0,1.0])
	plt.subplot(2,4,8)
	plt.hist([dataVals["postprocess.fuzzyPOS"], optGenVals[-1]["postprocess.fuzzyPOS"]]
				, bins=20, cumulative=-1, normed=True, lw=linewidth)
	plt.xlabel('fPoS - System\n(5 Criteria)', fontsize=11)
	plt.xlim([0,1.0])
	plt.ylim([0,1.0])

	plt.subplots_adjust(left=0.09, bottom=0.13, right=0.96, top=0.92, wspace=0.28, hspace=0.37)


#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#PLOT ALL RESULTS (with Pareto Frontier)
if False:
	fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12,8))
	#PHI vs. FoM
	axes[0,0].scatter(dataVals["postprocess.response_1"], dataVals["postprocess.response_2"], 8, c='lightblue', lw=0.0, alpha=0.18)
	p1 = axes[0,0].scatter([dataVals["postprocess.response_1"][i] for i in i_P0], [dataVals["postprocess.response_2"][i] for i in i_P0], 25, c='navy', marker='*', lw=0.0, label='True Pareto Frontier')
	p2 = axes[0,0].scatter(optGenVals[-1]["postprocess.response_1"], optGenVals[-1]["postprocess.response_2"], 25, c='red', lw=0.0,  marker='d', alpha=0.8, label='Optimization Results')
	axes[0,0].set_xlabel('Empty Weight Ratio - $\phi$')
	axes[0,0].set_ylabel('System Figure of Merit $(-)$')
	axes[0,0].legend(handles=[p1,p2], fontsize=11, ncol=2, bbox_to_anchor=(1.65, 1.15))

	axes[0,1].scatter(dataVals["postprocess.response_3"], dataVals["postprocess.response_1"], 8, c='lightblue', lw=0.0, alpha=0.18)
	axes[0,1].scatter([dataVals["postprocess.response_3"][i] for i in i_P0], [dataVals["postprocess.response_1"][i] for i in i_P0], 25, c='navy', marker='*', lw=0.0)
	axes[0,1].scatter(optGenVals[-1]["postprocess.response_3"], optGenVals[-1]["postprocess.response_1"], 25, c='red', lw=0.0,  marker='d', alpha=0.8)
	axes[0,1].set_xlabel('System $L/D$')
	axes[0,1].set_ylabel('Empty Weight Ratio - $\phi$')

	axes[1,0].scatter(dataVals["postprocess.response_4"], Ps, 8, c='lightblue', lw=0.0, alpha=0.18)
	axes[1,0].scatter([dataVals["postprocess.response_4"][i] for i in i_P0], [Ps[i] for i in i_P0], 25, c='navy', marker='*', lw=0.0)
	axes[1,0].scatter(optGenVals[-1]["postprocess.response_4"], [abs(x) for x in optGenVals[-1]["postprocess.response_6"]], 25, c='red', lw=0.0,  marker='d', alpha=0.8)
	axes[1,0].set_xlabel('System Propulsive Efficiency - $\eta_P$')
	axes[1,0].set_ylabel('Installed Power $(shp)$')

	axes[1,1].scatter(GWTs, VHs, 8, c='lightblue', lw=0.0, alpha=0.18)
	axes[1,1].scatter([GWTs[i] for i in i_P0], [VHs[i] for i in i_P0], 25, c='navy', marker='*', lw=0.0)
	axes[1,1].scatter([abs(x) for x in optGenVals[-1]["postprocess.response_5"]], [abs(x) for x in optGenVals[-1]["postprocess.response_7"]], 25, c='red', lw=0.0,  marker='d', alpha=0.8)
	axes[1,1].set_xlabel('Design Gross Weight $(lbs)$')
	axes[1,1].set_ylabel('Maximum Airspeed - $V_H$ (kts)')

#PLOT ALL RESULTS (with POS Pareto Frontier)
if True:
	fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12,8))
	#PHI vs. FoM
	axes[0,0].scatter(dataVals["postprocess.response_1"], dataVals["postprocess.response_2"], 4, c='lightblue', lw=0.0, alpha=0.18)
	p1 = axes[0,0].scatter([dataVals["postprocess.response_1"][i] for i in i_P0_POS+i_P1_POS], [dataVals["postprocess.response_2"][i] for i in i_P0_POS+i_P1_POS], 20, c='navy', marker='*', lw=0.0, label='FPoS Pareto Frontier')
	p2 = axes[0,0].scatter(optGenVals[-1]["postprocess.response_1"], optGenVals[-1]["postprocess.response_2"], 15, c='red', lw=0.0,  marker='d', alpha=0.8, label='Optimization Results')
	axes[0,0].set_xlabel('Empty Weight Ratio - $\phi$')
	axes[0,0].set_ylabel('System Figure of Merit $(-)$')
	axes[0,0].legend(handles=[p1,p2], fontsize=11, ncol=2, bbox_to_anchor=(1.65, 1.15))

	axes[0,1].scatter(dataVals["postprocess.response_3"], dataVals["postprocess.response_1"], 4, c='lightblue', lw=0.0, alpha=0.18)
	axes[0,1].scatter([dataVals["postprocess.response_3"][i] for i in i_P0_POS+i_P1_POS], [dataVals["postprocess.response_1"][i] for i in i_P0_POS+i_P1_POS], 20, c='navy', marker='*', lw=0.0)
	axes[0,1].scatter(optGenVals[-1]["postprocess.response_3"], optGenVals[-1]["postprocess.response_1"], 15, c='red', lw=0.0,  marker='d', alpha=0.8)
	axes[0,1].set_xlabel('System $L/D$')
	axes[0,1].set_ylabel('Empty Weight Ratio - $\phi$')

	axes[1,0].scatter(dataVals["postprocess.response_4"], Ps, 4, c='lightblue', lw=0.0, alpha=0.18)
	axes[1,0].scatter([dataVals["postprocess.response_4"][i] for i in i_P0_POS+i_P1_POS], [Ps[i] for i in i_P0_POS+i_P1_POS], 20, c='navy', marker='*', lw=0.0)
	axes[1,0].scatter(optGenVals[-1]["postprocess.response_4"], [abs(x) for x in optGenVals[-1]["postprocess.response_6"]], 15, c='red', lw=0.0,  marker='d', alpha=0.8)
	axes[1,0].set_xlabel('System Propulsive Efficiency - $\eta_P$')
	axes[1,0].set_ylabel('Installed Power $(shp)$')

	axes[1,1].scatter(GWTs, VHs, 4, c='lightblue', lw=0.0, alpha=0.18)
	axes[1,1].scatter([GWTs[i] for i in i_P0_POS+i_P1_POS], [VHs[i] for i in i_P0_POS+i_P1_POS], 20, c='navy', marker='*', lw=0.0)
	axes[1,1].scatter([abs(x) for x in optGenVals[-1]["postprocess.response_5"]], [abs(x) for x in optGenVals[-1]["postprocess.response_7"]], 15, c='red', lw=0.0,  marker='d', alpha=0.8)
	axes[1,1].set_xlabel('Design Gross Weight $(lbs)$')
	axes[1,1].set_ylabel('Maximum Airspeed - $V_H$ (kts)')
	
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#PLOT ALL RESULTS 
if False:
	fig = plt.figure()
	ax = fig.add_subplot(111, projection='3d')
	
	colAx = 'postprocess.response_3'
	mincolAx, maxcolAx = min(optGenVals[-1][colAx]), max(optGenVals[-1][colAx])
	ptCols = [plt.get_cmap('Blues')((x-mincolAx)/(maxcolAx-mincolAx)) for x in optGenVals[-1][colAx]]

	sizAx = 'postprocess.response_2'
	minsizAx, maxsizAx = min(optGenVals[-1][sizAx]), max(optGenVals[-1][sizAx])
	ptSizs = [25.0*x for x in optGenVals[-1][sizAx]]
	ax.scatter(optGenVals[-1]["postprocess.response_1"], 
			   optGenVals[-1]["postprocess.response_6"], 
			   optGenVals[-1]["postprocess.response_4"],
			   s=ptSizs, c=ptCols)
			   
	ax.set_xlabel('Empty Weight')
	ax.set_ylabel('Installed Power')
	ax.set_zlabel('Propulsive Eff.')

	
#PLOT ALL fPOS RESULTS 
if False:
	fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(12,8))
	#PHI vs. FoM
	axes.scatter(dataVals["postprocess.response_1_POS"], dataVals["postprocess.response_6_POS"], 15, c='lightblue', lw=0.0, alpha=0.2)
	axes.scatter([dataVals["postprocess.response_1_POS"][i] for i in i_P0_POS+i_P1_POS], [dataVals["postprocess.response_6_POS"][i] for i in i_P0_POS+i_P1_POS], 40, c='navy', lw=0.0, alpha=1.0)
	axes.set_xlabel('fPOS - Empty Weight Ratio')
	axes.set_ylabel('fPOS - Installed Power')
	axes.set_xlim([0.0,1.01])
	axes.set_ylim([0.0,1.01])
	

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#SCATTER PLOT MATRIX (PARETO FRONT IN OBJECTIVE SPACE:
if False:
	fig, axes = plt.subplots(nrows=len(pareto_outputs), ncols=len(pareto_outputs), figsize=(8,8))
	for i in range(len(pareto_outputs)):
		for j in range(len(pareto_outputs)):
			#axes[i,j].set_xlim([])
			#axes[i,j].set_xticks([])
			#axes[i,j].set_ylim([])
			#axes[i,j].set_yticks([])
			if i == j: 
				xt = 0.3*(pOut_ranges[pareto_outputs[j]][1] - pOut_ranges[pareto_outputs[j]][0]) + pOut_ranges[pareto_outputs[j]][0]
				yt = 0.6*(pOut_ranges[pareto_outputs[i]][1] - pOut_ranges[pareto_outputs[i]][0]) + pOut_ranges[pareto_outputs[i]][0]
				axes[i,j].text(xt, yt, pOut_names[pareto_outputs[i]], fontsize=16, rotation=45)
			else:
				
				axes[i,j].scatter([abs(x) for x in optGenVals[-1][pareto_outputs[j]]],
								  [abs(x) for x in optGenVals[-1][pareto_outputs[i]]])
				ax.grid(True)
			plt.sca(axes[i,j])					  
			plt.locator_params(nbins=5)
			axes[i,j].set_xlim(pOut_ranges[pareto_outputs[j]])
			axes[i,j].tick_params(labelsize=10)
			axes[i,j].set_ylim(pOut_ranges[pareto_outputs[i]])
			axes[i,j].tick_params(labelsize=10)
			if j <> 0: axes[i,j].set_yticklabels([])
			if i < len(pareto_outputs)-1: axes[i,j].set_xticklabels([])
			
	plt.subplots_adjust(left=0.04, bottom=0.04, right=0.96, top=0.94, wspace=0.08, hspace=0.08)



#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#PLOT ALL RESULTS (color by fPOS)
if False:
	fPoS_colors = [plt.get_cmap('Blues')(x) for x in dataVals["postprocess.fuzzyPOS"]]
	fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12,8))

	#PHI vs. FoM
	axes[0,0].scatter(dataVals["postprocess.response_1"], dataVals["postprocess.response_2"], [(x+0.1)*15 for x in dataVals["postprocess.fuzzyPOS"]], c=fPoS_colors, lw=0.0, alpha=0.3)
	axes[0,0].set_xlabel('Empty Weight Ratio - $\phi$')
	axes[0,0].set_ylabel('System Figure of Merit')

	axes[0,1].scatter(dataVals["postprocess.response_3"], dataVals["postprocess.response_1"], [(x+0.1)*15 for x in dataVals["postprocess.fuzzyPOS"]], c=fPoS_colors, lw=0.0, alpha=0.3)
	axes[0,1].set_xlabel('System Lift/Drag')
	axes[0,1].set_ylabel('Empty Weight Ratio - $\phi$')

	axes[1,0].scatter(dataVals["postprocess.response_4"], Ps, [(x+0.1)*15 for x in dataVals["postprocess.fuzzyPOS"]], c=fPoS_colors, lw=0.0, alpha=0.3)
	axes[1,0].set_xlabel('System Propulsive Efficiency - $\eta_P$')
	axes[1,0].set_ylabel('Installed Power (shp)')

	axes[1,1].scatter(GWTs, VHs, [(x+0.1)*15 for x in dataVals["postprocess.fuzzyPOS"]], c=fPoS_colors, lw=0.0, alpha=0.3)
	axes[1,1].set_xlabel('Design Gross Weight (lbs)')
	axes[1,1].set_ylabel('Maximum Airspeed - $V_H$ (kts)')
	

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#PLOT ALL RESULTS W/OPT RESULTS (color by compatibility)
#RESPONSE ORDER: PHI, FoM, L/D, etaP, GWT, Pinst, VH 
if False:
	fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12,8))
	#PHI vs. FoM
	axes[0,0].scatter(dataVals["postprocess.response_1"], dataVals["postprocess.response_2"], 4, c=compatColors, lw=0.0, alpha=0.4)
	axes[0,0].scatter(optGenVals[-1]["postprocess.response_1"], optGenVals[-1]["postprocess.response_2"], 10, c='r', lw=0.0, alpha=0.8)
	axes[0,0].set_xlabel('Empty Weight Ratio - $\phi$')
	axes[0,0].set_ylabel('System Figure of Merit')

	axes[0,1].scatter(dataVals["postprocess.response_3"], dataVals["postprocess.response_1"], 4, c=compatColors, lw=0.0, alpha=0.4)
	axes[0,1].scatter(optGenVals[-1]["postprocess.response_3"], optGenVals[-1]["postprocess.response_1"], 10, c='r', lw=0.0, alpha=0.8)
	axes[0,1].set_xlabel('System Lift/Drag')
	axes[0,1].set_ylabel('Empty Weight Ratio - $\phi$')

	axes[1,0].scatter(dataVals["postprocess.response_4"], Ps, 4, c=compatColors, alpha=0.4, lw=0.0)
	axes[1,0].scatter(optGenVals[-1]["postprocess.response_4"], [-float(x) for x in optGenVals[-1]["postprocess.response_6"]], 10, c='r', lw=0.0, alpha=0.8)
	axes[1,0].set_xlabel('System Propulsive Efficiency - $\eta_P$')
	axes[1,0].set_ylabel('Installed Power (shp)')

	axes[1,1].scatter(GWTs, VHs, 10, c=compatColors, alpha=0.4, lw=0.0)
	axes[1,1].scatter([-float(x) for x in optGenVals[-1]["postprocess.response_5"]], optGenVals[-1]["postprocess.response_7"], 10, c='r', lw=0.0, alpha=0.8)
	axes[1,1].set_xlabel('Design Gross Weight (lbs)')
	axes[1,1].set_ylabel('Maximum Airspeed - $V_H$ (kts)')
	
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#PLOT GROUPS:
if True:
	groups = [	[   1, None, None,    1, None, None, None,    1,    4],
				[   2, None, None,    4, None, None, None,    3,    4],
				[   3, None, None,    2, None, None, None,    1,    4],
				[   5, None, None, 	  2, None, None, None,    1,    1],
			    [   6, None, None,    2, None, None,    3, None, None],] #none = any
	groupNames = ["SMR Compound", "Traverse Var-Diam", "Tandem Slowed", "Fan-in-Body", "Tailsitter+Aux"]

	g_is = [] #get applicable indecies for each group
	for g in groups: #for each given group
		g_i = []
		#get any index in data where options match given in group
		for i in range(len(options_ALL)):
			if all([int(g[j]) == int(options_ALL[i][j]) for j in range(len(options_ALL[i])) if g[j] <> None]):
				g_i.append(i)
		g_is.append(g_i)

	fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12,8))
	colorcycler = cycle(['b', 'r', 'g', 'k', 'c', 'y'])
	for g in g_is: 
		phis  = [float(dataVals["postprocess.response_1"][i]) for i in range(len(dataVals["postprocess.response_1"])) if i in g]
		FoMs  = [float(dataVals["postprocess.response_2"][i]) for i in range(len(dataVals["postprocess.response_2"])) if i in g]
		LoDs  = [float(dataVals["postprocess.response_3"][i]) for i in range(len(dataVals["postprocess.response_3"])) if i in g]
		etaPs = [float(dataVals["postprocess.response_4"][i]) for i in range(len(dataVals["postprocess.response_4"])) if i in g]
		GTs   = [-float(dataVals["postprocess.response_5"][i]) for i in range(len(dataVals["postprocess.response_5"])) if i in g]
		Pins  = [-float(dataVals["postprocess.response_6"][i]) for i in range(len(dataVals["postprocess.response_6"])) if i in g]
		VHs   = [float(dataVals["postprocess.response_7"][i]) for i in range(len(dataVals["postprocess.response_7"])) if i in g]
		colori = next(colorcycler)

		axes[0,0].scatter(phis, FoMs, 20, c=colori, lw=0.0, alpha=0.35)
		axes[0,0].set_xlabel('Empty Weight Ratio - $\phi$')
		axes[0,0].set_ylabel('System Figure of Merit')

		axes[0,1].scatter(LoDs, phis, 20, c=colori, lw=0.0, alpha=0.35)
		axes[0,1].set_xlabel('System Lift/Drag')
		axes[0,1].set_ylabel('Empty Weight Ratio - $\phi$')

		axes[1,0].scatter(etaPs, Pins, 20, c=colori, lw=0.0, alpha=0.35)
		axes[1,0].set_xlabel('System Propulsive Efficiency - $\eta_P$')
		axes[1,0].set_ylabel('Installed Power (shp)')

		axes[1,1].scatter(GTs, VHs, 20, c=colori, lw=0.0, alpha=0.35)
		axes[1,1].set_xlabel('Design Gross Weight (lbs)')
		axes[1,1].set_ylabel('Maximum Airspeed - $V_H$ (kts)')

	plt.legend(groupNames)


#pp = PdfPages(opt_file[:-4] + '_POST_PROCESSING.pdf')
#figs = [plt.figure(n) for n in plt.get_fignums()]
#for fig in figs:
#	fig.savefig(pp, format='pdf')
#pp.close()
#plt.close('all')
#plt.clf()   
#plt.show()

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#OPTIMIZATION PROGRESS :
#SEPERATE SUBPLOTS
if False:
	pltGens = [0, 5, 10, 29]
	xAx = 'postprocess.response_1'
	yAx = 'postprocess.response_6'
	plt.figure()
	
	for i in range(len(pltGens)):
		plt.subplot(2,2,i+1)
		plt.scatter(optGenVals[pltGens[i]][xAx], [-x for x in optGenVals[pltGens[i]][yAx]], c='b')
		if i > 1: plt.xlabel('Empty Weight Ratio - $\phi$')
		if i == 0 or i == 2: plt.ylabel('Installed Power (shp)')
		plt.xlim([1,9])
		plt.ylim([2000,5000])
		plt.text(2, 2300, 'Gen '+str(pltGens[i]+1), color='r', fontsize=14)
		plt.grid(True)
#SAME PLOT
if False:
	pltGens = [0, 5, 10, 29]
	xAx = 'postprocess.response_1'
	yAx = 'postprocess.response_6'
	plt.figure()
	genPlots = []
	for i in range(len(pltGens)):
		#plt.subplot(2,2,i+1)
		col = ['r','orange','blue','green'][i] #plt.get_cmap('Blues')(float(i)/len(pltGens))
		p = plt.scatter(optGenVals[pltGens[i]][xAx], [-x for x in optGenVals[pltGens[i]][yAx]], 
						c=col, label='Gen '+str(pltGens[i]+1), alpha=0.5)
		genPlots.append(p)
	plt.xlabel('Empty Weight Ratio - $\phi$')
	plt.ylabel('Installed Power (shp)')
	plt.xlim([2,9])
	plt.ylim([2000,5000])
	plt.grid(True)
	plt.legend(handles=genPlots, ncol=4, bbox_to_anchor=(0.5,1.05))
	
#ANIMATE
if False:
	fig1, axes = plt.subplots(nrows=2, ncol=2, figsize=(12,8))
	
	def updatePlot(i):
		
		#PHI vs. FoM
		axes[0,0].cla()
		if i-2 >= 0: axes[0,0].scatter(optGenVals[i-2]["postprocess.response_1"], optGenVals[i-2]["postprocess.response_2"], c='b', alpha=0.1)
		if i-1 >= 0: axes[0,0].scatter(optGenVals[i-1]["postprocess.response_1"], optGenVals[i-1]["postprocess.response_2"], c='b', alpha=0.5)
		axes[0,0].scatter(optGenVals[i]["postprocess.response_1"], optGenVals[i]["postprocess.response_2"], c='b')
		axes[0,0].set_xlabel('Empty Weight Ratio - $\phi$')
		axes[0,0].set_xlim([1,9])
		axes[0,0].set_ylabel('System Figure of Merit')
		axes[0,0].set_ylim([0.2, 0.9])
		axes[0,0].text(7.9, 0.94, 'Generation '+str(i+1), fontsize=22, color='b')
		axes[0,0].legend(['Gen n-2', 'Gen n-1', 'Gen n-0'], bbox_to_anchor=(0.8,1.15), fontsize=11)
		#if i-1 >= 0: axes[0,0].legend(['Gen n-2', 'Gen n-1', 'Gen n-0'], bbox_to_anchor=(0.8,1.15), fontsize=11)
		#if i-2 >= 0: axes[0,0].legend(['Gen n-2', 'Gen n-1', 'Gen n-0'], bbox_to_anchor=(0.8,1.15), fontsize=11)
	
		axes[0,1].cla()
		if i-2 >= 0: axes[0,1].scatter(optGenVals[i-2]["postprocess.response_3"], optGenVals[i-2]["postprocess.response_1"], c='b', alpha=0.1)
		if i-1 >= 0: axes[0,1].scatter(optGenVals[i-1]["postprocess.response_3"], optGenVals[i-1]["postprocess.response_1"], c='b', alpha=0.5)
		axes[0,1].scatter(optGenVals[i]["postprocess.response_3"], optGenVals[i]["postprocess.response_4"], c=compatColors)
		axes[0,1].set_xlabel('System Lift/Drag')
		axes[0,1].set_xlim([5,20])
		axes[0,1].set_ylabel('System Propulsive Efficiency - $\eta_P$')
		axes[0,1].set_ylim([0.2,0.9])
		#axes[0,1].text(15.0, 0.81, 'Generation '+str(i+1), fontsize=14, color='b')
	
		axes[1,0].cla()
		if i-2 >= 0: axes[1,0].scatter(optGenVals[i-2]["postprocess.response_4"], [-x for x in optGenVals[i-2]["postprocess.response_6"]], c='b', alpha=0.1)
		if i-1 >= 0: axes[1,0].scatter(optGenVals[i-1]["postprocess.response_4"], [-x for x in optGenVals[i-1]["postprocess.response_6"]], c='b', alpha=0.5)
		axes[1,0].scatter(optGenVals[i]["postprocess.response_4"],  [-x for x in optGenVals[i]["postprocess.response_6"]], c=compatColors)
		axes[1,0].set_xlabel('System Propulsive Efficiency - $\eta_P$')
		axes[1,0].set_xlim([0.5,0.9])
		axes[1,0].set_ylabel('Installed Power (shp)')
		axes[1,0].set_ylim([1000,15000])
		#axes[1,0].text(0.78, 420, 'Generation '+str(i+1), fontsize=14, color='b')

		axes[1,1].cla()
		if i-2 >= 0: axes[1,1].scatter([float(x) for x in optGenVals[i-2]["postprocess.response_5"]], [float(x) for x in optGenVals[i-2]["postprocess.response_7"]], c='b', alpha=0.1)
		if i-1 >= 0: axes[1,1].scatter([float(x) for x in optGenVals[i-1]["postprocess.response_5"]], [float(x) for x in optGenVals[i-1]["postprocess.response_7"]], c='b', alpha=0.5)
		axes[1,1].scatter([-float(x) for x in optGenVals[i]["postprocess.response_5"]], [-float(x) for x in optGenVals[i]["postprocess.response_7"]], c=compatColors)
		axes[1,1].set_xlabel('Design Gross Weight (lbs)')
		axes[1,1].set_ylabel('Maximum Airspeed - $V_H$ (kts)')
		axes[1,1].set_xlim([1000,40000])
		axes[1,1].set_ylim([250,450])


	ani = animation.FuncAnimation(fig1, updatePlot, [int(g)-1 for g in gens], blit=False)
	
	dpi = 150
	writer = animation.writers['ffmpeg'](fps=1)
	ani.save('opt_animation.mp4', writer=writer, dpi=dpi, fps=5)
	
plt.show()



            